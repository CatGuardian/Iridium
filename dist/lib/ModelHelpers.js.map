{"version":3,"sources":["lib/ModelHelpers.ts"],"names":[],"mappings":"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","file":"lib/ModelHelpers.js","sourcesContent":["import * as MongoDB from \"mongodb\";\r\nimport {Model} from \"./Model\";\r\nimport * as Skmatc from \"skmatc\";\r\nimport {Omnom} from \"./utils/Omnom\";\r\nimport * as _ from \"lodash\";\r\nimport * as Bluebird from \"bluebird\";\r\n\r\n/**\r\n * A number of helper methods used commonly within Iridium, they provide a means to transform,\r\n * validate, wrap and diff instances and documents. By keeping these methods in one place we\r\n * help to improve testability and reduce code duplication (mouse abuse) throughout the codebase.\r\n * @internal\r\n */\r\nexport class ModelHelpers<TDocument extends { _id?: any }, TInstance> {\r\n    constructor(public model: Model<TDocument, TInstance>) {\r\n        this._validator = Skmatc.scope(model.schema);\r\n        model.validators.forEach(validator => this._validator.register(validator));\r\n    }\r\n\r\n    private _validator: Skmatc.Skmatc;\r\n\r\n    /**\r\n     * Validates a document to ensure that it matches the model's ISchema requirements\r\n     * @param {any} document The document to validate against the ISchema\r\n     * @returns {SkmatcCore.IResult} The result of the validation\r\n     */\r\n    validate(document: TDocument): Skmatc.Result {\r\n        return this._validator.validate(document);\r\n    }\r\n\r\n    /**\r\n     * Wraps the given document in an instance wrapper for use throughout the application\r\n     * @param {any} document The document to be wrapped as an instance\r\n     * @param {Boolean} isNew Whether the instance originated from the database or was created by the application\r\n     * @param {Boolean} isPartial Whether the document supplied contains all information present in the database\r\n     * @returns {any} An instance which wraps this document\r\n     */\r\n    wrapDocument(document: TDocument, isNew?: boolean, isPartial?: boolean): TInstance {\r\n        return new this.model.Instance(document, isNew, isPartial);\r\n    }\r\n\r\n    /**\r\n     * Converts the given document to its database form into a form\r\n     * using the transforms defined on the model.\r\n     * @param {any} document The document to be converted\r\n     * @returns {any} The result of having transformed the document.\r\n     * @remarks This is only really called from insert/create - as \r\n     */\r\n    transformToDB<T>(document: T, options: TransformOptions = { properties: true }): T {\r\n        if(options.document && this.model.transforms.$document)\r\n            document = <any>this.model.transforms.$document.toDB(document, \"$document\", this.model);\r\n        \r\n        if(!options.properties) return document;\r\n        \r\n        for (let property in this.model.transforms)\r\n            if(property === \"$document\") continue;\r\n            else if(document.hasOwnProperty(property)) {\r\n                document[property] = this.model.transforms[property].toDB(document[property], property, this.model);\r\n            }\r\n            \r\n        return document;\r\n    }\r\n    \r\n    /**\r\n     * Converts the given document from its database form using the\r\n     * transforms defined on the model.\r\n     * @param document The document to be converted.\r\n     * @returns The result of having transformed the document.\r\n     * @remarks Unlike the transformToDB function - this method only applies\r\n     * document level transforms, as property level transforms are applied in\r\n     * their relevant instance setters.\r\n     */\r\n    transformFromDB(document: TDocument, options: TransformOptions = { properties: true }): TDocument {\r\n        if(options.document && this.model.transforms.$document)\r\n            document = this.model.transforms.$document.fromDB(document, \"$document\", this.model);\r\n        \r\n        if(!options.properties) return document;\r\n        \r\n        for (let property in this.model.transforms)\r\n            if(property === \"$document\") continue;\r\n            else if(document.hasOwnProperty(property)) {\r\n                document[property] = this.model.transforms[property].fromDB(document[property], property, this.model);\r\n            }\r\n            \r\n        return document;\r\n    }\r\n\r\n    /**\r\n     * Converts the given document to its database form into a form\r\n     * using the transforms defined on the model.\r\n     * @param document The document to be converted\r\n     * @param processProperties Whether or not to process properties in addition\r\n     * document level transforms.\r\n     * @returns {any} A new document cloned from the original and transformed\r\n     */\r\n    convertToDB<T>(document: T, options: TransformOptions = { properties: true }): T {\r\n        let doc: T = this.cloneDocument(document);\r\n        return this.transformToDB(doc, options);\r\n    }\r\n\r\n    /**\r\n     * Performs a diff operation between two documents and creates a MongoDB changes object to represent the differences\r\n     * @param {any} original The original document prior to changes being made\r\n     * @param {any} modified The document after changes were made\r\n     */\r\n    diff(original: TDocument, modified: TDocument): any {\r\n        let omnom = new Omnom();\r\n        omnom.diff(original, modified);\r\n        return omnom.changes;\r\n    }\r\n    \r\n    /**\r\n     * Clones the given document recursively, taking into account complex types like\r\n     * Buffers correctly.\r\n     * \r\n     * @param {any} The document you wish to clone deeply.\r\n     */\r\n    cloneDocument<T>(original: T): T {\r\n        return _.cloneDeepWith(original, (value) => {\r\n           if(Buffer.isBuffer(value)) {\r\n               return value;\r\n           }\r\n           \r\n           if(value instanceof MongoDB.Binary) {\r\n               return value;\r\n           }\r\n           \r\n           if(value instanceof MongoDB.ObjectID) {\r\n               return value;\r\n           }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * Clones the given document recursively, taking into account complex types like\r\n     * Buffers correctly. Optimized for working with query documents instead of true\r\n     * documents.\r\n     * \r\n     * @param {any} The document you wish to clone deeply.\r\n     */\r\n    cloneConditions<T>(original: T): T {\r\n        return this.cloneDocument(original);\r\n    }\r\n}\r\n\r\nexport interface TransformOptions {\r\n    properties?: boolean;\r\n    document?: boolean;\r\n}"],"sourceRoot":"/source/"}