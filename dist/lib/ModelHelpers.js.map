{"version":3,"sources":["lib/ModelHelpers.ts"],"names":["ModelHelpers","ModelHelpers.constructor","ModelHelpers.validate","ModelHelpers.wrapDocument","ModelHelpers.diff"],"mappings":"AAGA,IAAO,MAAM,WAAW,QAAQ,CAAC,CAAC;AAClC,sBAAkB,eAAe,CAAC,CAAA;AAIlC;IACIA,sBAAmBA,KAAkCA;QAAlCC,UAAKA,GAALA,KAAKA,CAA6BA;QACjDA,IAAIA,CAACA,UAAUA,GAAGA,IAAIA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,CAACA;IAC/CA,CAACA;IAIDD;;;;OAIGA;IACHA,+BAAQA,GAARA,UAASA,QAAmBA;QACxBE,MAAMA,CAACA,IAAIA,CAACA,UAAUA,CAACA,QAAQA,CAACA,QAAQA,CAACA,CAACA;IAC9CA,CAACA;IAEDF;;;;;;OAMGA;IACHA,mCAAYA,GAAZA,UAAaA,QAAmBA,EAAEA,KAAeA,EAAEA,SAAmBA;QAClEG,MAAMA,CAACA,IAAIA,IAAIA,CAACA,KAAKA,CAACA,QAAQA,CAACA,QAAQA,EAAEA,KAAKA,EAAEA,SAASA,CAACA,CAACA;IAC/DA,CAACA;IAEDH;;;;OAIGA;IACHA,2BAAIA,GAAJA,UAAKA,QAAmBA,EAAEA,QAAmBA;QACzCI,IAAIA,KAAKA,GAAGA,IAAIA,eAAKA,EAAEA,CAACA;QACxBA,KAAKA,CAACA,IAAIA,CAACA,QAAQA,EAAEA,QAAQA,CAACA,CAACA;QAC/BA,MAAMA,CAACA,KAAKA,CAACA,OAAOA,CAACA;IACzBA,CAACA;IACLJ,mBAACA;AAADA,CArCA,AAqCCA,IAAA;AArCD,8BAqCC,CAAA","file":"lib/ModelHelpers.js","sourcesContent":["/// <reference path=\"../_references.d.ts\" />\r\nimport MongoDB = require('mongodb');\r\nimport Model from './Model';\r\nimport skmatc = require('skmatc');\r\nimport Omnom from './utils/Omnom';\r\nimport _ = require('lodash');\r\nimport Bluebird = require('bluebird');\r\n\r\nexport default class ModelHelpers<TDocument extends { _id?: any }, TInstance> {\r\n    constructor(public model: Model<TDocument, TInstance>) {\r\n        this._validator = new skmatc(model.schema);\r\n    }\r\n\r\n    private _validator: Skmatc.Skmatc;\r\n\r\n    /**\r\n     * Validates a document to ensure that it matches the model's ISchema requirements\r\n     * @param {any} document The document to validate against the ISchema\r\n     * @returns {SkmatcCore.IResult} The result of the validation\r\n     */\r\n    validate(document: TDocument): Skmatc.Result {\r\n        return this._validator.validate(document);\r\n    }\r\n\r\n    /**\r\n     * Wraps the given document in an instance wrapper for use throughout the application\r\n     * @param {any} document The document to be wrapped as an instance\r\n     * @param {Boolean} isNew Whether the instance originated from the database or was created by the application\r\n     * @param {Boolean} isPartial Whether the document supplied contains all information present in the database\r\n     * @returns {any} An instance which wraps this document\r\n     */\r\n    wrapDocument(document: TDocument, isNew?: boolean, isPartial?: boolean): TInstance {\r\n        return new this.model.Instance(document, isNew, isPartial);\r\n    }\r\n\r\n    /**\r\n     * Performs a diff operation between two documents and creates a MongoDB changes object to represent the differences\r\n     * @param {any} original The original document prior to changes being made\r\n     * @param {any} modified The document after changes were made\r\n     */\r\n    diff(original: TDocument, modified: TDocument): any {\r\n        var omnom = new Omnom();\r\n        omnom.diff(original, modified);\r\n        return omnom.changes;\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}