{"version":3,"sources":["lib/ModelHelpers.ts"],"names":["ModelHelpers","ModelHelpers.constructor","ModelHelpers.validate","ModelHelpers.wrapDocument","ModelHelpers.transformToDB","ModelHelpers.convertToDB","ModelHelpers.diff"],"mappings":"AAEA,IAAO,MAAM,WAAW,QAAQ,CAAC,CAAC;AAClC,sBAAoB,eAAe,CAAC,CAAA;AACpC,IAAO,CAAC,WAAW,QAAQ,CAAC,CAAC;AAG7B;;;;;GAKG;AACH;IACIA,sBAAmBA,KAAkCA;QADzDC,iBA8DCA;QA7DsBA,UAAKA,GAALA,KAAKA,CAA6BA;QACjDA,IAAIA,CAACA,UAAUA,GAAGA,MAAMA,CAACA,KAAKA,CAACA,KAAKA,CAACA,MAAMA,CAACA,CAACA;QAC7CA,KAAKA,CAACA,UAAUA,CAACA,OAAOA,CAACA,UAAAA,SAASA,IAAIA,OAAAA,KAAIA,CAACA,UAAUA,CAACA,QAAQA,CAACA,SAASA,CAACA,EAAnCA,CAAmCA,CAACA,CAACA;IAC/EA,CAACA;IAIDD;;;;OAIGA;IACHA,+BAAQA,GAARA,UAASA,QAAmBA;QACxBE,MAAMA,CAACA,IAAIA,CAACA,UAAUA,CAACA,QAAQA,CAACA,QAAQA,CAACA,CAACA;IAC9CA,CAACA;IAEDF;;;;;;OAMGA;IACHA,mCAAYA,GAAZA,UAAaA,QAAmBA,EAAEA,KAAeA,EAAEA,SAAmBA;QAClEG,MAAMA,CAACA,IAAIA,IAAIA,CAACA,KAAKA,CAACA,QAAQA,CAACA,QAAQA,EAAEA,KAAKA,EAAEA,SAASA,CAACA,CAACA;IAC/DA,CAACA;IAEDH;;;;;OAKGA;IACHA,oCAAaA,GAAbA,UAAiBA,QAAWA;QACxBI,GAAGA,CAACA,CAACA,GAAGA,CAACA,QAAQA,IAAIA,IAAIA,CAACA,KAAKA,CAACA,UAAUA,CAACA;YACvCA,EAAEA,CAAAA,CAACA,QAAQA,CAACA,cAAcA,CAACA,QAAQA,CAACA,CAACA;gBACjCA,QAAQA,CAACA,QAAQA,CAACA,GAAGA,IAAIA,CAACA,KAAKA,CAACA,UAAUA,CAACA,QAAQA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,QAAQA,CAACA,CAACA,CAACA;QACtFA,MAAMA,CAACA,QAAQA,CAACA;IACpBA,CAACA;IAEDJ;;;;;OAKGA;IACHA,kCAAWA,GAAXA,UAAeA,QAAWA;QACtBK,IAAIA,GAAGA,GAAMA,CAACA,CAACA,SAASA,CAACA,QAAQA,CAACA,CAACA;QACnCA,MAAMA,CAACA,IAAIA,CAACA,aAAaA,CAACA,GAAGA,CAACA,CAACA;IACnCA,CAACA;IAEDL;;;;OAIGA;IACHA,2BAAIA,GAAJA,UAAKA,QAAmBA,EAAEA,QAAmBA;QACzCM,IAAIA,KAAKA,GAAGA,IAAIA,aAAKA,EAAEA,CAACA;QACxBA,KAAKA,CAACA,IAAIA,CAACA,QAAQA,EAAEA,QAAQA,CAACA,CAACA;QAC/BA,MAAMA,CAACA,KAAKA,CAACA,OAAOA,CAACA;IACzBA,CAACA;IACLN,mBAACA;AAADA,CA9DA,AA8DCA,IAAA;AA9DY,oBAAY,eA8DxB,CAAA","file":"lib/ModelHelpers.js","sourcesContent":["import MongoDB = require('mongodb');\r\nimport {Model} from './Model';\r\nimport Skmatc = require('skmatc');\r\nimport {Omnom} from './utils/Omnom';\r\nimport _ = require('lodash');\r\nimport Bluebird = require('bluebird');\r\n\r\n/**\r\n * A number of helper methods used commonly within Iridium, they provide a means to transform,\r\n * validate, wrap and diff instances and documents. By keeping these methods in one place we\r\n * help to improve testability and reduce code duplication (mouse abuse) throughout the codebase.\r\n * @internal\r\n */\r\nexport class ModelHelpers<TDocument extends { _id?: any }, TInstance> {\r\n    constructor(public model: Model<TDocument, TInstance>) {\r\n        this._validator = Skmatc.scope(model.schema);\r\n        model.validators.forEach(validator => this._validator.register(validator));\r\n    }\r\n\r\n    private _validator: Skmatc.Skmatc;\r\n\r\n    /**\r\n     * Validates a document to ensure that it matches the model's ISchema requirements\r\n     * @param {any} document The document to validate against the ISchema\r\n     * @returns {SkmatcCore.IResult} The result of the validation\r\n     */\r\n    validate(document: TDocument): Skmatc.Result {\r\n        return this._validator.validate(document);\r\n    }\r\n\r\n    /**\r\n     * Wraps the given document in an instance wrapper for use throughout the application\r\n     * @param {any} document The document to be wrapped as an instance\r\n     * @param {Boolean} isNew Whether the instance originated from the database or was created by the application\r\n     * @param {Boolean} isPartial Whether the document supplied contains all information present in the database\r\n     * @returns {any} An instance which wraps this document\r\n     */\r\n    wrapDocument(document: TDocument, isNew?: boolean, isPartial?: boolean): TInstance {\r\n        return new this.model.Instance(document, isNew, isPartial);\r\n    }\r\n\r\n    /**\r\n     * Converts the given document to its database form into a form\r\n     * using the transforms defined on the model.\r\n     * @param {any} document The document to be converted\r\n     * @returns {any} A new document cloned from the original and transformed\r\n     */\r\n    transformToDB<T>(document: T): T {\r\n        for (var property in this.model.transforms)\r\n            if(document.hasOwnProperty(property))\r\n                document[property] = this.model.transforms[property].toDB(document[property]);\r\n        return document;\r\n    }\r\n\r\n    /**\r\n     * Converts the given document to its database form into a form\r\n     * using the transforms defined on the model.\r\n     * @param {any} document The document to be converted\r\n     * @returns {any} A new document cloned from the original and transformed\r\n     */\r\n    convertToDB<T>(document: T): T {\r\n        var doc: T = _.cloneDeep(document);\r\n        return this.transformToDB(doc);\r\n    }\r\n\r\n    /**\r\n     * Performs a diff operation between two documents and creates a MongoDB changes object to represent the differences\r\n     * @param {any} original The original document prior to changes being made\r\n     * @param {any} modified The document after changes were made\r\n     */\r\n    diff(original: TDocument, modified: TDocument): any {\r\n        var omnom = new Omnom();\r\n        omnom.diff(original, modified);\r\n        return omnom.changes;\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}