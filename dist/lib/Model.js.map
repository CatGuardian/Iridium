{"version":3,"sources":["lib/Model.ts"],"names":[],"mappings":"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","file":"lib/Model.js","sourcesContent":["import MongoDB = require(\"mongodb\");\r\nimport Bluebird = require(\"bluebird\");\r\nimport util = require(\"util\");\r\nimport _ = require(\"lodash\");\r\nimport Skmatc = require(\"skmatc\");\r\n\r\nimport {Core} from \"./Core\";\r\nimport {Instance} from \"./Instance\";\r\nimport {Schema} from \"./Schema\";\r\nimport {Hooks} from \"./Hooks\";\r\nimport {Plugin} from \"./Plugins\";\r\nimport {Cache} from \"./Cache\";\r\nimport {CacheDirector} from \"./CacheDirector\";\r\nimport * as General from \"./General\";\r\nimport {Cursor} from \"./Cursor\";\r\nimport * as Index from \"./Index\";\r\nimport * as ModelOptions from \"./ModelOptions\";\r\n\r\nimport {Omnom} from \"./utils/Omnom\";\r\nimport {ModelCache} from \"./ModelCache\";\r\nimport {ModelHelpers} from \"./ModelHelpers\";\r\nimport {ModelHandlers} from \"./ModelHandlers\";\r\nimport * as ModelInterfaces from \"./ModelInterfaces\";\r\nimport {ModelSpecificInstance} from \"./ModelSpecificInstance\";\r\nimport {InstanceImplementation} from \"./InstanceInterface\";\r\nimport {Transforms, DefaultTransforms} from \"./Transforms\";\r\nimport * as AggregationPipeline from \"./Aggregate\";\r\n\r\n/**\r\n * An Iridium Model which represents a structured MongoDB collection.\r\n * Models expose the methods you will generally use to query those collections, and ensure that\r\n * the results of those queries are returned as {TInstance} instances.\r\n *\r\n * @param TDocument The interface used to determine the schema of documents in the collection.\r\n * @param TInstance The interface or class used to represent collection documents in the JS world.\r\n *\r\n * @class\r\n */\r\nexport class Model<TDocument extends { _id?: any }, TInstance> {\r\n    /**\r\n     * Creates a new Iridium model representing a given ISchema and backed by a collection whose name is specified\r\n     * @param core The Iridium core that this model should use for database access\r\n     * @param instanceType The class which will be instantiated for each document retrieved from the database\r\n     * @constructor\r\n     */\r\n    constructor(core: Core, instanceType: InstanceImplementation<TDocument, TInstance>) {\r\n        if (!(core instanceof Core)) throw new Error(\"You failed to provide a valid Iridium core for this model\");\r\n        if (typeof instanceType !== \"function\") throw new Error(\"You failed to provide a valid instance constructor for this model\");\r\n        if (typeof instanceType.collection !== \"string\" || !instanceType.collection) throw new Error(\"You failed to provide a valid collection name for this model\");\r\n        if (!_.isPlainObject(instanceType.schema) || instanceType.schema._id === undefined) throw new Error(\"You failed to provide a valid schema for this model\");\r\n\r\n        this._core = core;\r\n\r\n        this.loadExternal(instanceType);\r\n        this.onNewModel();\r\n        this.loadInternal();\r\n    }\r\n\r\n    /**\r\n     * Loads any externally available properties (generally accessed using public getters/setters).\r\n     */\r\n    private loadExternal(instanceType: InstanceImplementation<TDocument, TInstance>) {\r\n        this._collection = instanceType.collection;\r\n        this._schema = instanceType.schema;\r\n        this._hooks = instanceType;\r\n        this._cacheDirector = instanceType.cache;\r\n        this._transforms = instanceType.transforms || {};\r\n        this._validators = instanceType.validators || [];\r\n        this._indexes = instanceType.indexes || [];\r\n\r\n        if(!this._schema._id) this._schema._id = MongoDB.ObjectID;\r\n\r\n        if(this._schema._id === MongoDB.ObjectID && !this._transforms._id)\r\n            this._transforms._id = DefaultTransforms.ObjectID;\r\n\r\n        if ((<Function>instanceType).prototype instanceof Instance)\r\n            this._Instance = ModelSpecificInstance(this, instanceType);\r\n        else\r\n            this._Instance = instanceType.bind(undefined, this);\r\n    }\r\n\r\n    /**\r\n     * Loads any internally (protected/private) properties and helpers only used within Iridium itself.\r\n     */\r\n    private loadInternal() {\r\n        this._cache = new ModelCache(this);\r\n        this._helpers = new ModelHelpers(this);\r\n        this._handlers = new ModelHandlers(this);\r\n    }\r\n\r\n    /**\r\n     * Process any callbacks and plugin delegation for the creation of this model.\r\n     * It will generally be called whenever a new Iridium Core is created, however is\r\n     * more specifically tied to the lifespan of the models themselves.\r\n     */\r\n    private onNewModel() {\r\n        this._core.plugins.forEach(plugin => plugin.newModel && plugin.newModel(this));\r\n    }\r\n\r\n    private _helpers: ModelHelpers<TDocument, TInstance>;\r\n    /**\r\n     * Provides helper methods used by Iridium for common tasks\r\n     * @returns A set of helper methods which are used within Iridium for common tasks\r\n     */\r\n    get helpers(): ModelHelpers<TDocument, TInstance> {\r\n        return this._helpers;\r\n    }\r\n\r\n    private _handlers: ModelHandlers<TDocument, TInstance>;\r\n    /**\r\n     * Provides helper methods used by Iridium for hook delegation and common processes\r\n     * @returns A set of helper methods which perform common event and response handling tasks within Iridium.\r\n     */\r\n    get handlers(): ModelHandlers<TDocument, TInstance> {\r\n        return this._handlers;\r\n    }\r\n\r\n    private _hooks: Hooks<TDocument, TInstance> = {};\r\n\r\n    /**\r\n     * Gets the even hooks subscribed on this model for a number of different state changes.\r\n     * These hooks are primarily intended to allow lifecycle manipulation logic to be added\r\n     * in the user's model definition, allowing tasks such as the setting of default values\r\n     * or automatic client-side joins to take place.\r\n     */\r\n    get hooks(): Hooks<TDocument, TInstance> {\r\n        return this._hooks;\r\n    }\r\n\r\n    private _schema: Schema;\r\n    /**\r\n     * Gets the schema dictating the data structure represented by this model.\r\n     * The schema is used by skmatc to validate documents before saving to the database, however\r\n     * until MongoDB 3.1 becomes widely available (with server side validation support) we are\r\n     * limited in our ability to validate certain types of updates. As such, these validations\r\n     * act more as a data-integrity check than anything else, unless you purely make use of Omnom\r\n     * updates within instances.\r\n     * @public\r\n     * @returns The defined validation schema for this model\r\n     */\r\n    get schema(): Schema {\r\n        return this._schema;\r\n    }\r\n\r\n    private _core: Core;\r\n    /**\r\n     * Gets the Iridium core that this model is associated with.\r\n     * @public\r\n     * @returns The Iridium core that this model is bound to\r\n     */\r\n    get core(): Core {\r\n        return this._core;\r\n    }\r\n\r\n    private _collection: string;\r\n    /**\r\n     * Gets the underlying MongoDB collection from which this model's documents are retrieved.\r\n     * You can make use of this object if you require any low level access to the MongoDB collection,\r\n     * however we recommend you make use of the Iridium methods whereever possible, as we cannot\r\n     * guarantee the accuracy of the type definitions for the underlying MongoDB driver.\r\n     * @public\r\n     * @returns {Collection}\r\n     */\r\n    get collection(): MongoDB.Collection {\r\n        if (!this.core.connection) throw new Error(\"Iridium Core not connected to a database.\");\r\n        return this.core.connection.collection(this._collection);\r\n    }\r\n\r\n    /**\r\n     * Gets the name of the underlying MongoDB collection from which this model's documents are retrieved\r\n     * @public\r\n     */\r\n    get collectionName(): string {\r\n        return this._collection;\r\n    }\r\n\r\n    /**\r\n     * Sets the name of the underlying MongoDB collection from which this model's documents are retrieved\r\n     * @public\r\n     */\r\n    set collectionName(value: string) {\r\n        this._collection = value;\r\n    }\r\n\r\n    private _cacheDirector: CacheDirector;\r\n    /**\r\n     * Gets the cache controller which dictates which queries will be cached, and under which key\r\n     * @public\r\n     * @returns {CacheDirector}\r\n     */\r\n    get cacheDirector(): CacheDirector {\r\n        return this._cacheDirector;\r\n    }\r\n\r\n    private _cache: ModelCache;\r\n    /**\r\n     * Gets the cache responsible for storing objects for quick retrieval under certain conditions\r\n     * @public\r\n     * @returns {ModelCache}\r\n     */\r\n    get cache(): ModelCache {\r\n        return this._cache;\r\n    }\r\n\r\n    private _Instance: ModelInterfaces.ModelSpecificInstanceConstructor<TDocument, TInstance>;\r\n\r\n    /**\r\n     * Gets the constructor responsible for creating instances for this model\r\n     */\r\n    get Instance(): ModelInterfaces.ModelSpecificInstanceConstructor<TDocument, TInstance> {\r\n        return this._Instance;\r\n    }\r\n\r\n    private _transforms: Transforms;\r\n\r\n    /**\r\n     * Gets the transforms which are applied whenever a document is received from the database, or\r\n     * prior to storing a document in the database. Tasks such as converting an ObjectID to a string\r\n     * and vice versa are all listed in this object.\r\n     */\r\n    get transforms() {\r\n        return this._transforms;\r\n    }\r\n\r\n    private _validators: Skmatc.Validator[];\r\n\r\n    /**\r\n     * Gets the custom validation types available for this model. These validators are added to the\r\n     * default skmatc validators, as well as those available through plugins, for use when checking\r\n     * your instances.\r\n     */\r\n    get validators() {\r\n        return this._validators;\r\n    }\r\n\r\n    private _indexes: (Index.Index | Index.IndexSpecification)[];\r\n\r\n    /**\r\n     * Gets the indexes which Iridium will manage on this model's database collection.\r\n     */\r\n    get indexes() {\r\n        return this._indexes;\r\n    }\r\n\r\n    /**\r\n     * Retrieves all documents in the collection and wraps them as instances\r\n     * @param {function(Error, TInstance[])} callback An optional callback which will be triggered when results are available\r\n     * @returns {Promise<TInstance[]>}\r\n     */\r\n    find(): Cursor<TDocument, TInstance>;\r\n    /**\r\n     * Returns all documents in the collection which match the conditions and wraps them as instances\r\n     * @param {Object} conditions The MongoDB query dictating which documents to return\r\n     * @returns {Promise<TInstance[]>}\r\n     */\r\n    find(conditions: { _id?: any, [key: string]: any } | any): Cursor<TDocument, TInstance>;\r\n    /**\r\n     * Returns all documents in the collection which match the conditions\r\n     * @param {Object} conditions The MongoDB query dictating which documents to return\r\n     * @param {Object} fields The fields to include or exclude from the document\r\n     * @returns {Promise<TInstance[]>}\r\n     */\r\n    find(conditions: { _id?: any, [key: string]: any }  | any, fields: { [name: string]: number }): Cursor<TDocument, TInstance>;\r\n    find(conditions?: { _id?: any, [key: string]: any } | any, fields?: any): Cursor<TDocument, TInstance> {\r\n        conditions = conditions || {};\r\n        fields = fields || {};\r\n\r\n        if (!_.isPlainObject(conditions)) conditions = { _id: conditions };\r\n        conditions = this._helpers.convertToDB(conditions);\r\n\r\n        let cursor = this.collection.find(conditions, {\r\n            fields: fields\r\n        });\r\n\r\n        return new Cursor<TDocument, TInstance>(this, conditions, cursor);\r\n    }\r\n\r\n    /**\r\n     * Retrieves a single document from the collection and wraps it as an instance\r\n     * @param {function(Error, TInstance)} callback An optional callback which will be triggered when a result is available\r\n     * @returns {Promise<TInstance>}\r\n     */\r\n    get(callback?: General.Callback<TInstance>): Bluebird<TInstance>;\r\n    /**\r\n     * Retrieves a single document from the collection with the given ID and wraps it as an instance\r\n     * @param {any} id The document's unique _id field value in downstream format\r\n     * @param {function(Error, TInstance)} callback An optional callback which will be triggered when a result is available\r\n     * @returns {Promise<TInstance>}\r\n     */\r\n    get(id: any, callback?: General.Callback<TInstance>): Bluebird<TInstance>;\r\n    /**\r\n     * Retrieves a single document from the collection which matches the conditions\r\n     * @param {Object} conditions The MongoDB query dictating which document to return\r\n     * @param {function(Error, TInstance)} callback An optional callback which will be triggered when a result is available\r\n     * @returns {Promise<TInstance>}\r\n     */\r\n    get(conditions: { _id?: any, [key: string]: any }, callback?: General.Callback<TInstance>): Bluebird<TInstance>;\r\n    /**\r\n     * Retrieves a single document from the collection with the given ID and wraps it as an instance\r\n     * @param {any} id The document's unique _id field value in downstream format\r\n     * @param {QueryOptions} options The options dictating how this function behaves\r\n     * @param {function(Error, TInstance)} callback An optional callback which will be triggered when a result is available\r\n     * @returns {Promise<TInstance>}\r\n     */\r\n    get(id: any, options: ModelOptions.QueryOptions, callback?: General.Callback<TInstance>): Bluebird<TInstance>;\r\n    /**\r\n     * Retrieves a single document from the collection which matches the conditions\r\n     * @param {Object} conditions The MongoDB query dictating which document to return\r\n     * @param {QueryOptions} options The options dictating how this function behaves\r\n     * @param {function(Error, TInstance)} callback An optional callback which will be triggered when a result is available\r\n     * @returns {Promise<TInstance>}\r\n     */\r\n    get(conditions: { _id?: any, [key: string]: any }, options: ModelOptions.QueryOptions, callback?: General.Callback<TInstance>): Bluebird<TInstance>;\r\n    get(...args: any[]): Bluebird<TInstance> {\r\n        return this.findOne.apply(this, args);\r\n    }\r\n\r\n    /**\r\n     * Retrieves a single document from the collection and wraps it as an instance\r\n     * @param {function(Error, TInstance)} callback An optional callback which will be triggered when a result is available\r\n     * @returns {Promise<TInstance>}\r\n     */\r\n    findOne(callback?: General.Callback<TInstance>): Bluebird<TInstance>;\r\n    /**\r\n     * Retrieves a single document from the collection with the given ID and wraps it as an instance\r\n     * @param {any} id The document's unique _id field value in downstream format\r\n     * @param {function(Error, TInstance)} callback An optional callback which will be triggered when a result is available\r\n     * @returns {Promise<TInstance>}\r\n     */\r\n    findOne(id: any, callback?: General.Callback<TInstance>): Bluebird<TInstance>;\r\n    /**\r\n     * Retrieves a single document from the collection which matches the conditions\r\n     * @param {Object} conditions The MongoDB query dictating which document to return\r\n     * @param {function(Error, TInstance)} callback An optional callback which will be triggered when a result is available\r\n     * @returns {Promise<TInstance>}\r\n     */\r\n    findOne(conditions: { _id?: any, [key: string]: any }, callback?: General.Callback<TInstance>): Bluebird<TInstance>;\r\n    /**\r\n     * Retrieves a single document from the collection with the given ID and wraps it as an instance\r\n     * @param {any} id The document's unique _id field value in downstream format\r\n     * @param {QueryOptions} options The options dictating how this function behaves\r\n     * @param {function(Error, TInstance)} callback An optional callback which will be triggered when a result is available\r\n     * @returns {Promise<TInstance>}\r\n     */\r\n    findOne(id: any, options: ModelOptions.QueryOptions, callback?: General.Callback<TInstance>): Bluebird<TInstance>;\r\n    /**\r\n     * Retrieves a single document from the collection which matches the conditions\r\n     * @param {Object} conditions The MongoDB query dictating which document to return\r\n     * @param {QueryOptions} options The options dictating how this function behaves\r\n     * @param {function(Error, TInstance)} callback An optional callback which will be triggered when a result is available\r\n     * @returns {Promise<TInstance>}\r\n     */\r\n    findOne(conditions: { _id?: any, [key: string]: any }, options: ModelOptions.QueryOptions, callback?: General.Callback<TInstance>): Bluebird<TInstance>;\r\n    findOne(...args: any[]): Bluebird<TInstance> {\r\n        let conditions: { _id?: any, [key: string]: any } = null;\r\n        let options: ModelOptions.QueryOptions = null;\r\n        let callback: General.Callback<TInstance> = null;\r\n\r\n        for (let argI = 0; argI < args.length; argI++) {\r\n            if (typeof args[argI] === \"function\") callback = callback || args[argI];\r\n            else if (_.isPlainObject(args[argI])) {\r\n                if (conditions) options = args[argI];\r\n                else conditions = args[argI];\r\n            }\r\n            else conditions = { _id: args[argI] };\r\n        }\r\n\r\n        conditions = conditions || {};\r\n        options = options || {};\r\n\r\n        _.defaults(options, {\r\n            cache: true\r\n        });\r\n\r\n        return Bluebird.resolve().bind(this).then(() => {\r\n            conditions = this._helpers.convertToDB(conditions);\r\n\r\n            return this._cache.get<TDocument>(conditions);\r\n        }).then((cachedDocument: TDocument) => {\r\n            if (cachedDocument) return cachedDocument;\r\n            return new Bluebird<any>((resolve, reject) => {\r\n                this.collection.findOne(conditions, <MongoDB.CollectionFindOptions>{\r\n                    fields: options.fields,\r\n                    skip: options.skip,\r\n                    sort: options.sort,\r\n                    limit: options.limit\r\n                }, (err, result) => {\r\n                        if (err) return reject(err);\r\n                        return resolve(result);\r\n                    });\r\n            });\r\n        }).then((document: TDocument) => {\r\n            if (!document) return null;\r\n            return this._handlers.documentReceived(conditions, document, (document, isNew?, isPartial?) => this._helpers.wrapDocument(document, isNew, isPartial), options);\r\n        }).nodeify(callback);\r\n    }\r\n\r\n    /**\r\n     * Inserts an object into the collection after validating it against this model's schema\r\n     * @param {Object} object The object to insert into the collection\r\n     * @param {function(Error, TInstance)} callback A callback which is triggered when the operation completes\r\n     * @returns {Promise<TInstance>}\r\n     */\r\n    create(objects: TDocument, callback?: General.Callback<TInstance>): Bluebird<TInstance>;\r\n    /**\r\n     * Inserts an object into the collection after validating it against this model's schema\r\n     * @param {Object} object The object to insert into the collection\r\n     * @param {CreateOptions} options The options dictating how this function behaves\r\n     * @param {function(Error, TInstance)} callback A callback which is triggered when the operation completes\r\n     * @returns {Promise<TInstance>}\r\n     */\r\n    create(objects: TDocument, options: ModelOptions.CreateOptions, callback?: General.Callback<TInstance>): Bluebird<TInstance>;\r\n    /**\r\n     * Inserts the objects into the collection after validating them against this model's schema\r\n     * @param {Object[]} objects The objects to insert into the collection\r\n     * @param {function(Error, TInstance)} callback A callback which is triggered when the operation completes\r\n     * @returns {Promise<TInstance>}\r\n     */\r\n    create(objects: TDocument[], callback?: General.Callback<TInstance[]>): Bluebird<TInstance[]>;\r\n    /**\r\n     * Inserts the objects into the collection after validating them against this model's schema\r\n     * @param {Object[]} objects The objects to insert into the collection\r\n     * @param {CreateOptions} options The options dictating how this function behaves\r\n     * @param {function(Error, TInstance)} callback A callback which is triggered when the operation completes\r\n     * @returns {Promise<TInstance>}\r\n     */\r\n    create(objects: TDocument[], options: ModelOptions.CreateOptions, callback?: General.Callback<TInstance[]>): Bluebird<TInstance[]>;\r\n    create(...args: any[]): Bluebird<any> {\r\n        return this.insert.apply(this, args);\r\n    }\r\n\r\n    /**\r\n     * Inserts an object into the collection after validating it against this model's schema\r\n     * @param {Object} object The object to insert into the collection\r\n     * @param {function(Error, TInstance)} callback A callback which is triggered when the operation completes\r\n     * @returns {Promise<TInstance>}\r\n     */\r\n    insert(objects: TDocument, callback?: General.Callback<TInstance>): Bluebird<TInstance>;\r\n    /**\r\n     * Inserts an object into the collection after validating it against this model's schema\r\n     * @param {Object} object The object to insert into the collection\r\n     * @param {CreateOptions} options The options dictating how this function behaves\r\n     * @param {function(Error, TInstance)} callback A callback which is triggered when the operation completes\r\n     * @returns {Promise<TInstance>}\r\n     */\r\n    insert(objects: TDocument, options: ModelOptions.CreateOptions, callback?: General.Callback<TInstance>): Bluebird<TInstance>;\r\n    /**\r\n     * Inserts the objects into the collection after validating them against this model's schema\r\n     * @param {Object[]} objects The objects to insert into the collection\r\n     * @param {function(Error, TInstance[])} callback A callback which is triggered when the operation completes\r\n     * @returns {Promise<TInstance>}\r\n     */\r\n    insert(objects: TDocument[], callback?: General.Callback<TInstance[]>): Bluebird<TInstance[]>;\r\n    /**\r\n     * Inserts the objects into the collection after validating them against this model's schema\r\n     * @param {Object[]} objects The objects to insert into the collection\r\n     * @param {CreateOptions} options The options dictating how this function behaves\r\n     * @param {function(Error, TInstance[])} callback A callback which is triggered when the operation completes\r\n     * @returns {Promise<TInstance>}\r\n     */\r\n    insert(objects: TDocument[], options: ModelOptions.CreateOptions, callback?: General.Callback<TInstance[]>): Bluebird<TInstance[]>;\r\n    insert(objs: TDocument | TDocument[], ...args: any[]): Bluebird<any> {\r\n        let objects: TDocument[];\r\n        let options: ModelOptions.CreateOptions = {};\r\n        let callback: General.Callback<any> = null;\r\n        if (typeof args[0] === \"function\") callback = args[0];\r\n        else {\r\n            options = args[0];\r\n            callback = args[1];\r\n        }\r\n\r\n        if (Array.isArray(objs))\r\n            objects = <TDocument[]>objs;\r\n        else\r\n            objects = <TDocument[]>[objs];\r\n\r\n        options = options || {};\r\n        _.defaults(options, <ModelOptions.CreateOptions>{\r\n            w: \"majority\",\r\n            forceServerObjectId: true\r\n        });\r\n\r\n        return Bluebird.resolve().then(() => {\r\n            let queryOptions = { w: options.w, upsert: options.upsert, new: true };\r\n\r\n            if (options.upsert) {\r\n                let docs = this._handlers.creatingDocuments(objects);\r\n                return docs.map((object: { _id: any; }) => {\r\n                    return new Bluebird<any[]>((resolve, reject) => {\r\n                        this.collection.findAndModify({ _id: object._id }, [\"_id\"], object, queryOptions, (err, result) => {\r\n                            if (err) return reject(err);\r\n                            return resolve(result);\r\n                        });\r\n                    });\r\n                });\r\n            }\r\n            else\r\n                return this._handlers.creatingDocuments(objects).then(objects => _.chunk(objects, 1000)).map((objects: any[]) => {\r\n                    return new Bluebird<any[]>((resolve, reject) => {\r\n                        this.collection.insertMany(objects, queryOptions, (err, result) => {\r\n                            if (err) return reject(err);\r\n                            return resolve(result.ops);\r\n                        });\r\n                    });\r\n                }).then(results => _.flatten(results));\r\n        }).map((inserted: any) => {\r\n            return this._handlers.documentReceived(null, inserted, (document, isNew?, isPartial?) => this._helpers.wrapDocument(document, isNew, isPartial), { cache: options.cache });\r\n        }).then((results: TInstance[]) => {\r\n            if (Array.isArray(objs)) return results;\r\n            return results[0];\r\n        }).nodeify(callback);\r\n    }\r\n\r\n    /**\r\n     * Updates the documents in the backing collection which match the conditions using the given update instructions\r\n     * @param {Object} conditions The conditions which determine which documents will be updated\r\n     * @param {Object} changes The changes to make to the documents\r\n     * @param {function(Error, Number)} callback A callback which is triggered when the operation completes\r\n     */\r\n    update(conditions: { _id?: any, [key: string]: any } | any, changes: any, callback?: General.Callback<number>): Bluebird<number>;\r\n    /**\r\n     * Updates the documents in the backing collection which match the conditions using the given update instructions\r\n     * @param {Object} conditions The conditions which determine which documents will be updated\r\n     * @param {Object} changes The changes to make to the documents\r\n     * @param {UpdateOptions} options The options which dictate how this function behaves\r\n     * @param {function(Error, Number)} callback A callback which is triggered when the operation completes\r\n     */\r\n    update(conditions: { _id?: any, [key: string]: any } | any, changes: any, options: ModelOptions.UpdateOptions, callback?: General.Callback<number>): Bluebird<number>;\r\n    update(conditions: { _id?: any, [key: string]: any } | any, changes: any, options?: ModelOptions.UpdateOptions, callback?: General.Callback<number>): Bluebird<number> {\r\n        if (typeof options === \"function\") {\r\n            callback = <General.Callback<number>>options;\r\n            options = {};\r\n        }\r\n\r\n        options = options || {};\r\n\r\n        if (!_.isPlainObject(conditions)) conditions = {\r\n            _id: conditions\r\n        };\r\n\r\n        _.defaults(options, {\r\n            w: \"majority\",\r\n            multi: true\r\n        });\r\n\r\n        return Bluebird.resolve().then(() => {\r\n            conditions = this._helpers.convertToDB(conditions);\r\n\r\n            return new Bluebird<number>((resolve, reject) => {\r\n                this.collection.updateMany(conditions, changes, options, (err, response) => {\r\n                    if (err) return reject(err);\r\n\r\n                    // New MongoDB 2.6+ response type\r\n                    if (response.result && response.result.nModified !== undefined) return resolve(response.result.nModified);\r\n\r\n                    // Legacy response type\r\n                    return resolve(response.result.n);\r\n                });\r\n            })\r\n        }).nodeify(callback);\r\n    }\r\n\r\n    /**\r\n     * Counts the number of documents in the collection\r\n     * @param {function(Error, Number)} callback A callback which is triggered when the operation completes\r\n     * @returns {Promise<number>}\r\n     */\r\n    count(callback?: General.Callback<number>): Bluebird<number>;\r\n    /**\r\n     * Counts the number of documents in the collection which match the conditions provided\r\n     * @param {Object} conditions The conditions which determine whether an object is counted or not\r\n     * @param {function(Error, Number)} callback A callback which is triggered when the operation completes\r\n     * @returns {Promise<number>}\r\n     */\r\n    count(conditions: { _id?: any, [key: string]: any } | any, callback?: General.Callback<number>): Bluebird<number>;\r\n    count(conds?: any, callback?: General.Callback<number>): Bluebird<number> {\r\n        let conditions: { _id?: any, [key: string]: any } = <{ _id?: any, [key: string]: any }>conds;\r\n        if (typeof conds === \"function\") {\r\n            callback = <General.Callback<number>>conds;\r\n            conditions = {};\r\n        }\r\n\r\n        conditions = conditions || {};\r\n\r\n        if (!_.isPlainObject(conditions)) conditions = {\r\n            _id: conditions\r\n        };\r\n\r\n        return Bluebird.resolve().then(() => {\r\n            conditions = this._helpers.convertToDB(conditions);\r\n\r\n            return new Bluebird<number>((resolve, reject) => {\r\n                this.collection.count(conditions, (err, results) => {\r\n                    if (err) return reject(err);\r\n                    return resolve(results);\r\n                });\r\n            });\r\n        }).nodeify(callback);\r\n    }\r\n\r\n    /**\r\n     * Removes all documents from the collection\r\n     * @param {function(Error, Number)} callback A callback which is triggered when the operation completes\r\n     * @returns {Promise<number>}\r\n     */\r\n    remove(callback?: General.Callback<number>): Bluebird<number>;\r\n    /**\r\n     * Removes all documents from the collection which match the conditions\r\n     * @param {Object} conditions The conditions determining whether an object is removed or not\r\n     * @param {function(Error, Number)} callback A callback which is triggered when the operation completes\r\n     * @returns {Promise<number>}\r\n     */\r\n    remove(conditions: { _id?: any, [key: string]: any } | any, callback?: General.Callback<number>): Bluebird<number>;\r\n    /**\r\n     * Removes all documents from the collection which match the conditions\r\n     * @param {Object} conditions The conditions determining whether an object is removed or not\r\n     * @param {Object} options The options controlling the way in which the function behaves\r\n     * @param {function(Error, Number)} callback A callback which is triggered when the operation completes\r\n     * @returns {Promise<number>}\r\n     */\r\n    remove(conditions: { _id?: any, [key: string]: any }, options: ModelOptions.RemoveOptions, callback?: General.Callback<number>): Bluebird<number>;\r\n    remove(conds?: any, options?: ModelOptions.RemoveOptions, callback?: General.Callback<number>): Bluebird<number> {\r\n        let conditions: { _id?: any, [key: string]: any } = <{ _id?: any, [key: string]: any }>conds;\r\n\r\n        if (typeof options === \"function\") {\r\n            callback = <General.Callback<number>>options;\r\n            options = {};\r\n        }\r\n\r\n        if (typeof conds === \"function\") {\r\n            callback = <General.Callback<number>>conds;\r\n            options = {};\r\n            conditions = {};\r\n        }\r\n\r\n        conditions = conditions || {};\r\n        options = options || {};\r\n\r\n        _.defaults(options, {\r\n            w: \"majority\"\r\n        });\r\n\r\n        if (!_.isPlainObject(conditions)) conditions = {\r\n            _id: conditions\r\n        };\r\n\r\n        return Bluebird.resolve().then(() => {\r\n            conditions = this._helpers.convertToDB(conditions);\r\n\r\n            return new Bluebird<number>((resolve, reject) => {\r\n                this.collection.remove(conditions, options, (err, response) => {\r\n                    if (err) return reject(err);\r\n                    return resolve(response.result.n);\r\n                });\r\n            });\r\n        }).then((count) => {\r\n            if (count === 1) this._cache.clear(conditions);\r\n            return Bluebird.resolve(count);\r\n        }).nodeify(callback);\r\n    }\r\n\r\n    aggregate<T>(pipeline: AggregationPipeline.Stage[]): Bluebird<T[]> {\r\n        return new Bluebird<T[]>((resolve, reject) => {\r\n            this.collection.aggregate(pipeline, (err, results) => {\r\n                if(err) return reject(err);\r\n                return resolve(results);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Ensures that the given index is created for the collection\r\n     * @param {Object} specification The index specification object used by MongoDB\r\n     * @param {function(Error, String)} callback A callback which is triggered when the operation completes\r\n     * @returns {Promise<String>} The name of the index\r\n     */\r\n    ensureIndex(specification: Index.IndexSpecification, callback?: General.Callback<string>): Bluebird<string>;\r\n    /**\r\n     * Ensures that the given index is created for the collection\r\n     * @param {Object} specification The index specification object used by MongoDB\r\n     * @param {MongoDB.IndexOptions} options The options dictating how the index is created and behaves\r\n     * @param {function(Error, String)} callback A callback which is triggered when the operation completes\r\n     * @returns {Promise<String>} The name of the index\r\n     */\r\n    ensureIndex(specification: Index.IndexSpecification, options: MongoDB.IndexOptions, callback?: General.Callback<string>): Bluebird<string>;\r\n    ensureIndex(specification: Index.IndexSpecification, options?: MongoDB.IndexOptions, callback?: General.Callback<string>): Bluebird<string> {\r\n        if (typeof options === \"function\") {\r\n            callback = <General.Callback<any>>options;\r\n            options = {};\r\n        }\r\n\r\n        return new Bluebird<string>((resolve, reject) => {\r\n            this.collection.ensureIndex(specification, options, (err, name: any) => {\r\n                if (err) return reject(err);\r\n                return resolve(name);\r\n            });\r\n        }).nodeify(callback);\r\n    }\r\n\r\n    /**\r\n     * Ensures that all indexes defined in the model's options are created\r\n     * @param {function(Error, String[])} callback A callback which is triggered when the operation completes\r\n     * @returns {Promise<String[]>} The names of the indexes\r\n     */\r\n    ensureIndexes(callback?: General.Callback<string[]>): Bluebird<string[]> {\r\n        return Bluebird.resolve(this._indexes).map((index: Index.Index | Index.IndexSpecification) => {\r\n            return this.ensureIndex((<Index.Index>index).spec || <Index.IndexSpecification>index, (<Index.Index>index).options || {});\r\n        }).nodeify(callback);\r\n    }\r\n\r\n    /**\r\n     * Drops the index with the specified name if it exists in the collection\r\n     * @param {String} name The name of the index to remove\r\n     * @param {function(Error, Boolean)} callback A callback which is triggered when the operation completes\r\n     * @returns {Promise<Boolean>} Whether the index was dropped\r\n     */\r\n    dropIndex(name: string, callback?: General.Callback<boolean>): Bluebird<boolean>;\r\n    /**\r\n     * Drops the index if it exists in the collection\r\n     * @param {IndexSpecification} index The index to remove\r\n     * @param {function(Error, Boolean)} callback A callback which is triggered when the operation completes\r\n     * @returns {Promise<Boolean>} Whether the index was dropped\r\n     */\r\n    dropIndex(index: Index.IndexSpecification, callback?: General.Callback<boolean>): Bluebird<boolean>;\r\n    dropIndex(specification: string | Index.IndexSpecification, callback?: General.Callback<boolean>): Bluebird<boolean> {\r\n        let index: string;\r\n\r\n        if (typeof (specification) === \"string\") index = <string>specification;\r\n        else {\r\n            index = _(<Index.IndexSpecification>specification).map((direction, key) => `${key}_${direction}`).reduce<string>((x, y) => `${x}_${y}`);\r\n        }\r\n\r\n        return new Bluebird<boolean>((resolve, reject) => {\r\n            this.collection.dropIndex(index, (err, result: { ok: number }) => {\r\n                if (err) return reject(err);\r\n                return resolve(<any>!!result.ok);\r\n            });\r\n        }).nodeify(callback);\r\n    }\r\n\r\n    /**\r\n     * Removes all indexes (except for _id) from the collection\r\n     * @param {function(Error, Boolean)} callback A callback which is triggered when the operation completes\r\n     * @returns {Promise<Boolean>} Whether the indexes were dropped\r\n     */\r\n    dropIndexes(callback?: General.Callback<boolean>): Bluebird<boolean> {\r\n        return new Bluebird<any>((resolve, reject) => {\r\n            this.collection.dropAllIndexes((err, count) => {\r\n                if (err) return reject(err);\r\n                return resolve(count);\r\n            });\r\n        }).nodeify(callback);\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}