{"version":3,"sources":["lib/Core.ts"],"names":["Core","Core.constructor","Core.plugins","Core.settings","Core.connection","Core.url","Core.cache","Core.register","Core.connect","Core.close","Core.express","Core.onConnecting","Core.onConnected"],"mappings":"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","file":"lib/Core.js","sourcesContent":["import Bluebird = require('bluebird');\r\nimport MongoDB = require('mongodb');\r\nimport _ = require('lodash');\r\nimport http = require('http');\r\nimport events = require('events');\r\n\r\nimport {Configuration} from './Configuration';\r\nimport {Plugin} from './Plugins';\r\nimport {Model} from './Model';\r\nimport {Instance} from './Instance';\r\n\r\nimport {MiddlewareFactory} from './Middleware';\r\nimport * as ExpressMiddleware from './middleware/Express';\r\nimport {ExpressMiddlewareFactory} from './middleware/Express';\r\n\r\nimport {Cache} from './Cache';\r\nimport {NoOpCache} from './caches/NoOpCache';\r\nimport {MemoryCache} from './caches/MemoryCache';\r\n\r\n/**\r\n * The Iridium Core, responsible for managing the connection to the database as well\r\n * as any plugins you are making use of.\r\n *\r\n * Generally you will subclass this to provide your own custom core with the models you\r\n * make use of within your application.\r\n */\r\nexport class Core {\r\n    /**\r\n     * Creates a new Iridium Core instance connected to the specified MongoDB instance\r\n     * @param {Iridium.IridiumConfiguration} config The config object defining the database to connect to\r\n     * @constructs Core\r\n     */\r\n    constructor(config: Configuration);\r\n    /**\r\n     * Creates a new Iridium Core instance connected to the specified MongoDB instance\r\n     * @param {String} url The URL of the MongoDB instance to connect to\r\n     * @param {Iridium.IridiumConfiguration} config The config object made available as settings\r\n     * @constructs Core\r\n     */\r\n    constructor(uri: string, config?: Configuration);\r\n    constructor(uri: string | Configuration, config?: Configuration) {\r\n\r\n        var args = Array.prototype.slice.call(arguments, 0);\r\n        uri = config = null;\r\n        for (var i = 0; i < args.length; i++) {\r\n            if (typeof args[i] == 'string')\r\n                uri = args[i];\r\n            else if (typeof args[i] == 'object')\r\n                config = args[i];\r\n        }\r\n\r\n        if (!uri && !config) throw new Error(\"Expected either a URI or config object to be supplied when initializing Iridium\");\r\n\r\n        this._url = <string>uri;\r\n        this._config = config;\r\n    }\r\n\r\n    private mongoConnectAsyc = Bluebird.promisify<MongoDB.Db, string, any>(MongoDB.MongoClient.connect);\r\n\r\n    private _plugins: Plugin[] = [];\r\n    private _url: string;\r\n    private _config: Configuration;\r\n    private _connection: MongoDB.Db;\r\n    private _cache: Cache = new NoOpCache();\r\n\r\n    private _connectPromise: Bluebird<MongoDB.Db>;\r\n\r\n    /**\r\n     * Gets the plugins registered with this Iridium Core\r\n     * @returns {[Iridium.Plugin]}\r\n     */\r\n    get plugins(): Plugin[] {\r\n        return this._plugins;\r\n    }\r\n\r\n    /**\r\n     * Gets the configuration specified in the construction of this\r\n     * Iridium Core.\r\n     * @returns {Iridium.Configuration}\r\n     */\r\n    get settings(): Configuration {\r\n        return this._config;\r\n    }\r\n\r\n    /**\r\n     * Gets the currently active database connection for this Iridium\r\n     * Core.\r\n     * @returns {MongoDB.Db}\r\n     */\r\n    get connection(): MongoDB.Db {\r\n        return this._connection;\r\n    }\r\n\r\n    /**\r\n     * Gets the URL used to connect to MongoDB\r\n     * @returns {String}\r\n     */\r\n    get url(): string {\r\n        if (this._url) return this._url;\r\n        var url: string = 'mongodb://';\r\n\r\n        if (this._config.username) {\r\n            url += this._config.username;\r\n            if (this._config.password)\r\n                url += ':' + this._config.password;\r\n            url += '@';\r\n        }\r\n\r\n        var hosts = [];\r\n\r\n        if (this._config.host) {\r\n            if (this._config.port)\r\n                hosts.push(this._config.host + ':' + this._config.port);\r\n            else\r\n                hosts.push(this._config.host);\r\n        }\r\n\r\n        if (this._config.hosts) {\r\n            _.each(this._config.hosts, (host) => {\r\n                if (host.port)\r\n                    hosts.push(host.address + ':' + host.port);\r\n                else if(this._config.port)\r\n                    hosts.push(host.address + ':' + this._config.port);\r\n                else\r\n                    hosts.push(host.address);\r\n            });\r\n        }\r\n\r\n        if (hosts.length)\r\n            url += _.uniq(hosts).join(',');\r\n        else\r\n            url += 'localhost';\r\n\r\n        url += '/' + this._config.database;\r\n\r\n        return url;\r\n    }\r\n\r\n    /**\r\n     * Gets the cache used to store objects retrieved from the database for performance reasons\r\n     * @returns {cache}\r\n     */\r\n    get cache(): Cache {\r\n        return this._cache;\r\n    }\r\n\r\n    set cache(value: Cache) {\r\n        this._cache = value;\r\n    }\r\n\r\n    /**\r\n     * Registers a new plugin with this Iridium Core\r\n     * @param {Iridium.Plugin} plugin The plugin to register with this Iridium Core\r\n     * @returns {Iridium.Core}\r\n     */\r\n    register(plugin: Plugin): Core {\r\n        this.plugins.push(plugin);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Connects to the database server specified in the provided configuration\r\n     * @param {function(Error, Iridium.Core)} [callback] A callback to be triggered once the connection is established.\r\n     * @returns {Promise}\r\n     */\r\n    connect(callback?: (err: Error, core: Core) => any): Bluebird<Core> {\r\n        return Bluebird.resolve().then(() => {\r\n            if (this._connection) return this._connection;\r\n            if (this._connectPromise) return this._connectPromise;\r\n            return this._connectPromise = this.mongoConnectAsyc(this.url, this._config && this._config.options);\r\n        }).then((db: MongoDB.Db) => {\r\n            return this.onConnecting(db);\r\n        }).then(db => {\r\n            this._connection = db;\r\n            this._connectPromise = null;\r\n            return this.onConnected();\r\n        }).then(() => {\r\n            return this;\r\n        }, (err) => {\r\n            if (this._connection) this._connection.close();\r\n            this._connection = null;\r\n            this._connectPromise = null;\r\n            return Bluebird.reject(err);\r\n        }).nodeify(callback);\r\n    }\r\n\r\n    /**\r\n     * Closes the active database connection\r\n     * @type {Promise}\r\n     */\r\n    close(): Bluebird<Core> {\r\n        return Bluebird.resolve().then(() => {\r\n            if (!this._connection) return this;\r\n            var conn: MongoDB.Db = this._connection;\r\n            this._connection = null;\r\n            conn.close();\r\n            return this;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Provides an express middleware which can be used to set the req.db property\r\n     * to the current Iridium instance.\r\n     * @returns {Iridium.ExpressMiddleware}\r\n     */\r\n    express(): ExpressMiddleware.ExpressMiddleware {\r\n        return ExpressMiddlewareFactory(this);\r\n    }\r\n\r\n    /**\r\n     * A method which is called whenever a new connection is made to the database.\r\n     *\r\n     * @param connection The underlying MongoDB connection which was created, you can modify or replace this if you wish.\r\n     * @returns A promise for the connection, allowing you to perform any asynchronous initialization required by your application.\r\n     *\r\n     * In subclassed Iridium Cores this method can be overridden to manipulate the properties\r\n     * of the underlying MongoDB connection object, such as authenticating. Until this method\r\n     * resolves a connection object, Iridium will be unable to execute any queries. If you wish\r\n     * to run Iridium queries then look at the onConnected method.\r\n     */\r\n    protected onConnecting(connection: MongoDB.Db): Bluebird<MongoDB.Db> {\r\n        return Bluebird.resolve(connection);\r\n    }\r\n\r\n    /**\r\n     * A method which is called once a database connection has been established and accepted by Iridium\r\n     *\r\n     * In subclassed Iridium cores this method can be overridden to perform tasks whenever a\r\n     * connection to the database has been established - such as setting up indexes for your\r\n     * collections or seeding the database.\r\n     */\r\n    protected onConnected(): Bluebird<void> {\r\n        return Bluebird.resolve();\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}