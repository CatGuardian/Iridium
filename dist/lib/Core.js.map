{"version":3,"sources":["lib/Core.ts"],"names":[],"mappings":"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","file":"lib/Core.js","sourcesContent":["import * as Bluebird from \"bluebird\";\r\nimport * as MongoDB from \"mongodb\";\r\nimport * as _ from \"lodash\";\r\nimport http = require(\"http\");\r\nimport events = require(\"events\");\r\n\r\nimport {Configuration} from \"./Configuration\";\r\nimport {Plugin} from \"./Plugins\";\r\nimport {Model} from \"./Model\";\r\nimport {Instance} from \"./Instance\";\r\n\r\nimport {MiddlewareFactory} from \"./Middleware\";\r\nimport * as ExpressMiddleware from \"./middleware/Express\";\r\nimport {ExpressMiddlewareFactory} from \"./middleware/Express\";\r\n\r\nimport {Cache} from \"./Cache\";\r\nimport {NoOpCache} from \"./caches/NoOpCache\";\r\nimport {MemoryCache} from \"./caches/MemoryCache\";\r\n\r\n/**\r\n * The Iridium Core, responsible for managing the connection to the database as well\r\n * as any plugins you are making use of.\r\n *\r\n * Generally you will subclass this to provide your own custom core with the models you\r\n * make use of within your application.\r\n */\r\nexport class Core {\r\n    /**\r\n     * Creates a new Iridium Core instance connected to the specified MongoDB instance\r\n     * @param {Iridium.IridiumConfiguration} config The config object defining the database to connect to\r\n     * @constructs Core\r\n     */\r\n    constructor(config: Configuration);\r\n    /**\r\n     * Creates a new Iridium Core instance connected to the specified MongoDB instance\r\n     * @param {String} url The URL of the MongoDB instance to connect to\r\n     * @param {Iridium.IridiumConfiguration} config The config object made available as settings\r\n     * @constructs Core\r\n     */\r\n    constructor(uri: string, config?: Configuration);\r\n    constructor(uri: string | Configuration, config?: Configuration) {\r\n\r\n        let args = Array.prototype.slice.call(arguments, 0);\r\n        uri = config = null;\r\n        for (let i = 0; i < args.length; i++) {\r\n            if (typeof args[i] == \"string\")\r\n                uri = args[i];\r\n            else if (typeof args[i] == \"object\")\r\n                config = args[i];\r\n        }\r\n\r\n        if (!uri && !config) throw new Error(\"Expected either a URI or config object to be supplied when initializing Iridium\");\r\n\r\n        this._url = <string>uri;\r\n        this._config = config;\r\n    }\r\n\r\n    private mongoConnectAsyc = Bluebird.promisify<MongoDB.Db, string, any>(MongoDB.MongoClient.connect);\r\n\r\n    private _plugins: Plugin[] = [];\r\n    private _url: string;\r\n    private _config: Configuration;\r\n    private _connection: MongoDB.Db;\r\n    private _cache: Cache = new NoOpCache();\r\n\r\n    private _connectPromise: Bluebird<MongoDB.Db>;\r\n\r\n    /**\r\n     * Gets the plugins registered with this Iridium Core\r\n     * @returns {[Iridium.Plugin]}\r\n     */\r\n    get plugins(): Plugin[] {\r\n        return this._plugins;\r\n    }\r\n\r\n    /**\r\n     * Gets the configuration specified in the construction of this\r\n     * Iridium Core.\r\n     * @returns {Iridium.Configuration}\r\n     */\r\n    get settings(): Configuration {\r\n        return this._config;\r\n    }\r\n\r\n    /**\r\n     * Gets the currently active database connection for this Iridium\r\n     * Core.\r\n     * @returns {MongoDB.Db}\r\n     */\r\n    get connection(): MongoDB.Db {\r\n        return this._connection;\r\n    }\r\n\r\n    /**\r\n     * Gets the URL used to connect to MongoDB\r\n     * @returns {String}\r\n     */\r\n    get url(): string {\r\n        if (this._url) return this._url;\r\n        let url: string = \"mongodb://\";\r\n\r\n        if (this._config.username) {\r\n            url += this._config.username;\r\n            if (this._config.password)\r\n                url += \":\" + this._config.password;\r\n            url += \"@\";\r\n        }\r\n\r\n        let hosts = [];\r\n\r\n        if (this._config.host) {\r\n            if (this._config.port)\r\n                hosts.push(this._config.host + \":\" + this._config.port);\r\n            else\r\n                hosts.push(this._config.host);\r\n        }\r\n\r\n        if (this._config.hosts) {\r\n            _.each(this._config.hosts, (host) => {\r\n                if (host.port)\r\n                    hosts.push(host.address + \":\" + host.port);\r\n                else if(this._config.port)\r\n                    hosts.push(host.address + \":\" + this._config.port);\r\n                else\r\n                    hosts.push(host.address);\r\n            });\r\n        }\r\n\r\n        if (hosts.length)\r\n            url += _.uniq(hosts).join(\",\");\r\n        else\r\n            url += \"localhost\";\r\n\r\n        url += \"/\" + this._config.database;\r\n\r\n        return url;\r\n    }\r\n\r\n    /**\r\n     * Gets the cache used to store objects retrieved from the database for performance reasons\r\n     * @returns {cache}\r\n     */\r\n    get cache(): Cache {\r\n        return this._cache;\r\n    }\r\n\r\n    set cache(value: Cache) {\r\n        this._cache = value;\r\n    }\r\n\r\n    /**\r\n     * Registers a new plugin with this Iridium Core\r\n     * @param {Iridium.Plugin} plugin The plugin to register with this Iridium Core\r\n     * @returns {Iridium.Core}\r\n     */\r\n    register(plugin: Plugin): Core {\r\n        this.plugins.push(plugin);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Connects to the database server specified in the provided configuration\r\n     * @param {function(Error, Iridium.Core)} [callback] A callback to be triggered once the connection is established.\r\n     * @returns {Promise}\r\n     */\r\n    connect(callback?: (err: Error, core: Core) => any): Bluebird<Core> {\r\n        return Bluebird.resolve().then(() => {\r\n            if (this._connection) return this._connection;\r\n            if (this._connectPromise) return this._connectPromise;\r\n            return this._connectPromise = this.mongoConnectAsyc(this.url, this._config && this._config.options);\r\n        }).then((db: MongoDB.Db) => {\r\n            return this.onConnecting(db);\r\n        }).then(db => {\r\n            this._connection = db;\r\n            this._connectPromise = null;\r\n            return this.onConnected();\r\n        }).then(() => {\r\n            return this;\r\n        }, (err) => {\r\n            if (this._connection) this._connection.close();\r\n            this._connection = null;\r\n            this._connectPromise = null;\r\n            return Bluebird.reject(err);\r\n        }).nodeify(callback);\r\n    }\r\n\r\n    /**\r\n     * Closes the active database connection\r\n     * @type {Promise}\r\n     */\r\n    close(): Bluebird<Core> {\r\n        return Bluebird.resolve().then(() => {\r\n            if (!this._connection) return this;\r\n            let conn: MongoDB.Db = this._connection;\r\n            this._connection = null;\r\n            conn.close();\r\n            return this;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Provides an express middleware which can be used to set the req.db property\r\n     * to the current Iridium instance.\r\n     * @returns {Iridium.ExpressMiddleware}\r\n     */\r\n    express(): ExpressMiddleware.ExpressMiddleware {\r\n        return ExpressMiddlewareFactory(this);\r\n    }\r\n\r\n    /**\r\n     * A method which is called whenever a new connection is made to the database.\r\n     *\r\n     * @param connection The underlying MongoDB connection which was created, you can modify or replace this if you wish.\r\n     * @returns A promise for the connection, allowing you to perform any asynchronous initialization required by your application.\r\n     *\r\n     * In subclassed Iridium Cores this method can be overridden to manipulate the properties\r\n     * of the underlying MongoDB connection object, such as authenticating. Until this method\r\n     * resolves a connection object, Iridium will be unable to execute any queries. If you wish\r\n     * to run Iridium queries then look at the onConnected method.\r\n     */\r\n    protected onConnecting(connection: MongoDB.Db): Bluebird<MongoDB.Db> {\r\n        return Bluebird.resolve(connection);\r\n    }\r\n\r\n    /**\r\n     * A method which is called once a database connection has been established and accepted by Iridium\r\n     *\r\n     * In subclassed Iridium cores this method can be overridden to perform tasks whenever a\r\n     * connection to the database has been established - such as setting up indexes for your\r\n     * collections or seeding the database.\r\n     */\r\n    protected onConnected(): Bluebird<void> {\r\n        return Bluebird.resolve();\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}