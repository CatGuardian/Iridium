{"version":3,"sources":["lib/Transforms.ts"],"names":[],"mappings":";AAAA,qBAA+B,QAAQ,CAAC,CAAA;AAqC3B,yBAAiB,GAAG;IAC/B,QAAQ,EAA+B;QACvC,MAAM,EAAE,UAAA,KAAK,IAAI,OAAA,KAAK,YAAY,eAAQ,GAAG,KAAK,CAAC,WAAW,EAAE,GAAG,KAAK,EAAvD,CAAuD;QACxE,IAAI,EAAE,UAAA,KAAK,IAAI,OAAA,OAAO,KAAK,KAAK,QAAQ,GAAG,IAAI,eAAQ,CAAC,KAAK,CAAC,GAAG,KAAK,EAAvD,CAAuD;KACtE;IACD,MAAM,EAA6B;QAClC,MAAM,EAAE,UAAA,KAAK;YACZ,EAAE,CAAA,CAAC,CAAC,KAAK,CAAC;gBAAC,MAAM,CAAC,IAAI,CAAC;YACvB,EAAE,CAAA,CAAC,KAAK,YAAY,aAAM,CAAC;gBAAC,MAAM,CAAO,KAAM,CAAC,MAAM,CAAC;YAEvD,MAAM,CAAC,KAAK,CAAC;QACd,CAAC;QACD,IAAI,EAAE,UAAA,KAAK;YACV,EAAE,CAAA,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;gBAAC,MAAM,CAAC,IAAI,aAAM,CAAC,KAAK,CAAC,CAAC;YACpD,EAAE,CAAA,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBAAC,MAAM,CAAC,IAAI,aAAM,CAAC,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;YAC9D,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;KACD;CACD,CAAA","file":"lib/Transforms.js","sourcesContent":["import {ObjectID, Binary} from \"./BSON\";\r\nimport {Model} from \"./Model\";\r\n\r\nexport interface Transforms {\r\n\t/**\r\n\t * A transform which is applied to the entire document.\r\n\t */\r\n\t$document?: PropertyTransform<any>;\r\n\t_id?: PropertyTransform<any>;\r\n\t[property:string]: PropertyTransform<any>;\r\n}\r\n\r\n/**\r\n * Converts the value of a property to and from its database representation.\r\n */\r\nexport interface PropertyTransform<T> {\r\n\t/**\r\n\t * Converts a property's value from its database representation into one\r\n\t * suitable for the application.\r\n\t * @param value The value stored in the MongoDB database document.\r\n\t * @param property The name of the document property to which this transform is being applied.\r\n\t * @param model The Iridium Model on which this transform is being applied\r\n\t * @returns A derived value which is more useful to the application.\r\n\t */\r\n\tfromDB(value: T, property: string, model: Model<any,any>): any;\r\n\r\n\t/**\r\n\t * Converts a property's value into a representation more suitable for\r\n\t * the database.\r\n\t * @param value The value used by the application.\r\n\t * @param property The name of the document property to which this transform is being applied.\r\n\t * @param model The Iridium Model on which this transform is being applied\r\n\t * @returns The database optimized representation of the value.\r\n\t */\r\n\ttoDB(value: any, property: string, model: Model<any,any>): T;\r\n}\r\n\r\nexport const DefaultTransforms = {\r\n \tObjectID: <PropertyTransform<ObjectID>>{\r\n\t\tfromDB: value => value instanceof ObjectID ? value.toHexString() : value,\r\n\t\ttoDB: value => typeof value === \"string\" ? new ObjectID(value) : value\r\n\t},\r\n\tBinary: <PropertyTransform<Binary>>{\r\n\t\tfromDB: value => {\r\n\t\t\tif(!value) return null;\r\n\t\t\tif(value instanceof Binary) return (<any>value).buffer;\r\n\t\t\t\r\n\t\t\treturn value;\r\n\t\t},\r\n\t\ttoDB: value => {\r\n\t\t\tif(Buffer.isBuffer(value)) return new Binary(value);\r\n\t\t\tif(Array.isArray(value)) return new Binary(new Buffer(value));\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n}"],"sourceRoot":"/source/"}