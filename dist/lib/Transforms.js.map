{"version":3,"sources":["lib/Transforms.ts"],"names":[],"mappings":"AAAA,IAAO,OAAO,WAAW,SAAS,CAAC,CAAC;AA2BvB,yBAAiB,GAAG;IAC/B,QAAQ,EAAqB;QAC7B,MAAM,EAAE,UAAA,KAAK,IAAI,OAAA,KAAK,IAAI,KAAK,CAAC,SAAS,IAAI,UAAU,GAAG,IAAI,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,WAAW,EAAE,GAAG,KAAK,EAA7F,CAA6F;QAC9G,IAAI,EAAE,UAAA,KAAK,IAAI,OAAA,KAAK,IAAI,OAAO,KAAK,KAAK,QAAQ,GAAG,IAAI,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,KAAK,EAAxE,CAAwE;KACvF;IACD,MAAM,EAAqB;QAC1B,MAAM,EAAE,UAAA,KAAK;YACZ,EAAE,CAAA,CAAC,CAAC,KAAK,CAAC;gBAAC,MAAM,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;YAChC,EAAE,CAAA,CAAC,KAAK,CAAC,SAAS,KAAK,QAAQ,CAAC,CAAC,CAAC;gBACjC,IAAI,MAAM,GAAG,IAAI,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBACvC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;YACxC,CAAC;YAED,MAAM,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,UAAA,KAAK;YACV,EAAE,CAAA,CAAC,CAAC,KAAK,CAAC;gBAAC,KAAK,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;YACjC,IAAI,CAAC,EAAE,CAAA,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBAAC,KAAK,GAAG,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC;YAExD,EAAE,CAAA,CAAC,KAAK,IAAI,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;gBAAC,MAAM,CAAC,IAAI,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACrE,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;KACD;CACD,CAAA","file":"lib/Transforms.js","sourcesContent":["import MongoDB = require('mongodb');\r\n\r\nexport interface Transforms {\r\n\t[property:string]: PropertyTransform;\r\n}\r\n\r\n/**\r\n * Converts the value of a property to and from its database representation.\r\n */\r\nexport interface PropertyTransform {\r\n\t/**\r\n\t * Converts a property's value from its database representation into one\r\n\t * suitable for the application.\r\n\t * @param value The value stored in the MongoDB database document.\r\n\t * @returns A derived value which is more useful to the application.\r\n\t */\r\n\tfromDB(value: any): any;\r\n\r\n\t/**\r\n\t * Converts a property's value into a representation more suitable for\r\n\t * the database.\r\n\t * @param value The value used by the application.\r\n\t * @returns The database optimized representation of the value.\r\n\t */\r\n\ttoDB(value: any): any;\r\n}\r\n\r\nexport const DefaultTransforms = {\r\n \tObjectID: <PropertyTransform>{\r\n\t\tfromDB: value => value && value._bsontype == 'ObjectID' ? new MongoDB.ObjectID(value.id).toHexString() : value,\r\n\t\ttoDB: value => value && typeof value === 'string' ? new MongoDB.ObjectID(value) : value\r\n\t},\r\n\tBinary: <PropertyTransform>{\r\n\t\tfromDB: value => {\r\n\t\t\tif(!value) return new Buffer(0);\r\n\t\t\tif(value._bsontype === \"Binary\") {\r\n\t\t\t\tlet binary = new MongoDB.Binary(value);\r\n\t\t\t\treturn binary.read(0, binary.length());\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn new Buffer(0);\r\n\t\t},\r\n\t\ttoDB: value => {\r\n\t\t\tif(!value) value = new Buffer(0);\r\n\t\t\telse if(Array.isArray(value)) value = new Buffer(value);\r\n\t\t\t\r\n\t\t\tif(value && Buffer.isBuffer(value)) return new MongoDB.Binary(value);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n}"],"sourceRoot":"/source/"}