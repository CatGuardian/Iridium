{"version":3,"sources":["lib/ModelCache.ts"],"names":[],"mappings":";AACA,IAAO,QAAQ,WAAW,UAAU,CAAC,CAAC;AAEtC;;;;GAIG;AACH;IACI,oBAAmB,KAAqB;QAArB,UAAK,GAAL,KAAK,CAAgB;IAExC,CAAC;IAED,wBAAG,GAAH,UAAO,KAAQ;QACX,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAAC,MAAM,CAAC;QAChF,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;IAC/E,CAAC;IAED,wBAAG,GAAH,UAAO,UAAe;QAClB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;YAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAI,IAAI,CAAC,CAAC;QACpH,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAI,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAC9G,CAAC;IAED,0BAAK,GAAL,UAAM,UAAe;QACjB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;YAAC,MAAM,CAAC;QAC1F,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC;IACpF,CAAC;IACL,iBAAC;AAAD,CAnBA,AAmBC,IAAA;AAnBY,kBAAU,aAmBtB,CAAA","file":"lib/ModelCache.js","sourcesContent":["import {Model} from \"./Model\";\r\nimport Bluebird = require(\"bluebird\");\r\n\r\n/**\r\n * A centralized class which ties the cache and cache directors together in a cohesive way\r\n * for use by Iridium.\r\n * @internal\r\n */\r\nexport class ModelCache {\r\n    constructor(public model: Model<any,any>) {\r\n\r\n    }\r\n\r\n    set<T>(value: T): void {\r\n        if (!this.model.cacheDirector || !this.model.cacheDirector.valid(value)) return;\r\n        this.model.core.cache.set(this.model.cacheDirector.buildKey(value), value);\r\n    }\r\n\r\n    get<T>(conditions: any): Bluebird<T> {\r\n        if (!this.model.cacheDirector || !this.model.cacheDirector.validQuery(conditions)) return Bluebird.resolve(<T>null);\r\n        return Bluebird.resolve(this.model.core.cache.get<T>(this.model.cacheDirector.buildQueryKey(conditions)));\r\n    }\r\n\r\n    clear(conditions: any): void {\r\n        if (!this.model.cacheDirector || !this.model.cacheDirector.validQuery(conditions)) return;\r\n        this.model.core.cache.clear(this.model.cacheDirector.buildQueryKey(conditions));\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}