{"version":3,"sources":["lib/General.ts"],"names":[],"mappings":"AAAA,4CAA4C;AAiE3C","file":"lib/General.js","sourcesContent":["/// <reference path=\"../_references.d.ts\" />\r\n\r\n/**\r\n * A method which is called once an asynchronous operation has completed, an alternative\r\n * to using Promises.\r\n * @param T The type of object returned by the asynchronous operation.\r\n */\r\nexport interface Callback<T> {\r\n    /**\r\n     * @param err The error object, if one occurred, otherwise null if the operation completed successfully.\r\n     * @param object The result of the asynchronous operation if it completed successfully. If err is defined, the presence of this value is unknown.\r\n     */\r\n    (err: Error, object?: T): void;\r\n}\r\n\r\n/**\r\n * A method which is used to determine whether a value within a collection meets a set of criteria.\r\n * @param T The type of item in the collection.\r\n */\r\nexport interface Predicate<T> {\r\n    /**\r\n     * @param object The value of the item in the collection\r\n     * @param key The key, if one is available, under which the item appeared within the collection\r\n     * @returns A true-y value if the item met the predicate conditions, false-y values if it did not.\r\n     */\r\n    (object: T, key?: string): boolean;\r\n}\r\n\r\n/**\r\n * A method which is called to retrieve a value of the given type.\r\n * @param T The type of value to be retrieved.\r\n */\r\nexport interface PropertyGetter<T> {\r\n    /**\r\n     * Gets the current value of the property\r\n     * @returns The current value\r\n     */\r\n    (): T;\r\n}\r\n\r\n/**\r\n * A method which is called to set a value of the given type.\r\n * @param T The type of value to set\r\n */\r\nexport interface PropertySetter<T> {\r\n    /**\r\n     * Sets the value to the provided one\r\n     * @param value The new value to set\r\n     */\r\n    (value: T): void;\r\n}\r\n\r\n/**\r\n * A compound property which provides either a getter, setter or both.\r\n * @param T The type of objects stored in the property\r\n */\r\nexport interface Property<T> {\r\n    /**\r\n     * An optional getter which can be used to retrieve the property's value\r\n     */\r\n    get?: PropertyGetter<T>;\r\n    /**\r\n     * An optional setter which can be used to set the property's value\r\n     */\r\n    set?: PropertySetter<T>;\r\n}"],"sourceRoot":"/source/"}