{"version":3,"sources":["lib/middleware/Express.ts"],"names":[],"mappings":";AAIA;;;;;;GAMG;AACH,kCAAyC,IAAU;IAC/C,MAAM,CAAC,UAAU,GAAuB,EAAE,GAAwB,EAAE,IAA0C;QAC1G,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC;YAChB,MAAM,CAAC,cAAc,CAAC,GAAG,EAAE,IAAI,EAAE;gBAC7B,GAAG,EAAE,cAAa,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;aACnC,CAAC,CAAC;YACH,IAAI,EAAE,CAAC;QACX,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACnB,CAAC,CAAC;AACN,CAAC;AATe,gCAAwB,2BASvC,CAAA","file":"lib/middleware/Express.js","sourcesContent":["import http = require('http');\r\nimport {MiddlewareFactory} from '../Middleware';\r\nimport {Core} from '../Core';\r\n\r\n/**\r\n * A factory method which creates Express/Connect compatible middleware functions to inject\r\n * a 'db' field on your request objects as well as ensuring that the Iridium Core is connected\r\n * to a MongoDB database before handling any requests.\r\n *\r\n * @internal\r\n */\r\nexport function ExpressMiddlewareFactory(core: Core): ExpressMiddleware {\r\n    return function (req: http.ServerRequest, res: http.ServerResponse, next:(err?: Error, route?: String) => void) {\r\n        core.connect().then(function() {\r\n            Object.defineProperty(req, 'db', {\r\n                get: function() { return core; }\r\n            });\r\n            next();\r\n        }).catch(next);\r\n    };\r\n}\r\n\r\n/**\r\n * An Express/Connect compatible middleware function which injects req.db and ensures that the Iridium Core\r\n * has an active database connection before continuing the request handling process.\r\n */\r\nexport interface ExpressMiddleware {\r\n    (req: http.ServerRequest, res: http.ServerResponse, next:(err?: Error, route?: String) => void);\r\n}"],"sourceRoot":"/source/"}