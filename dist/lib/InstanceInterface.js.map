{"version":3,"sources":["lib/InstanceInterface.ts"],"names":[],"mappings":"AAkGC","file":"lib/InstanceInterface.js","sourcesContent":["/// <reference path=\"../_references.d.ts\" />\r\nimport {Schema} from './Schema';\r\nimport {Model} from './Model';\r\nimport * as Index from './Index';\r\nimport {CacheDirector} from './CacheDirector';\r\nimport {Transforms} from './Transforms';\r\n\r\n/**\r\n * This interface dictates the format of an instance class which wraps documents received\r\n * from the database for a specific Iridium model.\r\n * \r\n * @param TDocument The interface representing the documents stored in the database, after being passed through the transforms pipeline.\r\n * @param TInstance The type of object which is instantiated when calling this implementation's constructor.\r\n * \r\n * It is important to note that, when implementing this interface, each of the properties and methods\r\n * should be exposed statically. That is, you would expose the collection property as a static variable\r\n * on the instance implementation, since prototype methods and variables become available to consumers of the\r\n * instance itself.\r\n */\r\nexport interface InstanceImplementation<TDocument extends { _id ?: any }, TInstance> {\r\n    /**\r\n     * A constructor which creates a new instance tied to the given model and representing the given document.\r\n     * @param model The Iridium Model which this instance should be tied to, gives the instance access to the database collection and any other context it requires.\r\n     * @param doc The document this instance should wrap from the database. This provides the data context for the instance.\r\n     * @param isNew Whether this document is known to exist in the database or not, for example, if the instance was generated from user input and hasn't been saved yet.\r\n     * @param isPartial Whether the document which has been given to this instance had any field restrictions imposed on it during the query, and may therefore only contain partial data.\r\n     */\r\n    new (model: Model<TDocument, TInstance>, doc: TDocument, isNew?: boolean, isPartial?: boolean): TInstance;\r\n    \r\n    /**\r\n     * The name of the database collection from which documents are retrieved, and to which they are stored.\r\n     */\r\n    collection: string;\r\n\r\n    /**\r\n     * The database schematic used for validation of instances prior to storing them in the database.\r\n     * This schematic should follow the guides set out in skmatc's documentation, and is used whenever\r\n     * you insert a new document into the collection or save an instance using the default instance type.\r\n     * Operations like update() (and by extension, save() when using the update operations) cannot be checked\r\n     * by skmatc for consistency and as a result will not have their data validated - be careful when making\r\n     * use of them as a result.\r\n     */\r\n    schema: Schema;\r\n    \r\n    /**\r\n     * Any additional indexes on the collection which should be managed by Iridium.\r\n     * This field is optional, but if provided allows you to make use of the model's ensureIndexes() method\r\n     * to automatically generate all specified indexes.\r\n     */\r\n    indexes?: (Index.Index | Index.IndexSpecification)[];\r\n    \r\n    /**\r\n     * An optional method which will be called whenever a document is about to be inserted into the database,\r\n     * allowing you to set default values and do any preprocessing you wish prior to the document being inserted.\r\n     */\r\n    onCreating? (document: TDocument): void;\r\n    \r\n    /**\r\n     * An optional method which is called whenever a new document is received from the model's collection and\r\n     * prior to the document being wrapped, can be used to perform preprocessing if necessary - however we recommend\r\n     * you rather make use of transforms for that task.\r\n     */\r\n    onRetrieved? (document: TDocument): void;\r\n    \r\n    /**\r\n     * An optional method which is called whenever a new document for this model has been wrapped in an instance.\r\n     */\r\n    onReady? (instance: TInstance): void;\r\n    \r\n    /**\r\n     * An optional method which is called prior to saving an instance, it is provided with the instance itself as\r\n     * well as the proposed changes to the instance. This allows you to make additional changes, such as updating\r\n     * a lastChanged property on the document, or abort changes by throwing an error.\r\n     */\r\n    onSaving? (instance: TInstance, changes: any): void;\r\n\r\n    /**\r\n     * The cache controller used to determine whether a document may be cached, as well as deriving a unique cache\r\n     * key for the document and similarly, for a query. This works in concert with the cache implementation itself\r\n     * to ensure that documents are cached in an intelligent manner. By default this will simply make use of the\r\n     * document's _id field as the cache key - however that behaviour may be modified if you wish to query on other\r\n     * properties instead.\r\n     */\r\n    cache?: CacheDirector;\r\n    \r\n    /**\r\n     * Any additional validation types you wish to make available for use within this model's database schema. This\r\n     * allows you to validate using conditions otherwise not available within skmatc itself. For more information\r\n     * on implementing a validator, take a look at the skmatc documentation on GitHub.\r\n     */\r\n    validators?: Skmatc.Validator[];\r\n    \r\n    /**\r\n     * Any transform operations you would like to perform on documents received from the database, or prior to being\r\n     * sent to the database. These may include things such as converting ObjectIDs to strings for the application, and\r\n     * then back to ObjectIDs once they return to the database.\r\n     */\r\n    transforms?: Transforms;\r\n}"],"sourceRoot":"/source/"}