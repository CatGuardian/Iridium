{"version":3,"sources":["lib/utils/Omnom.ts"],"names":[],"mappings":"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","file":"lib/utils/Omnom.js","sourcesContent":["import _ = require('lodash');\r\nimport MongoDB = require('mongodb');\r\n\r\nexport class Omnom {\r\n    constructor(public options: {\r\n        atomicNumbers?: boolean;\r\n    } = {}) {\r\n        this._changes = {};\r\n    }\r\n\r\n    private _changes: {\r\n        $set?: any;\r\n        $unset?: any;\r\n        $inc?: any;\r\n        $push?: any;\r\n        $pull?: any;\r\n        $pullAll?: any;\r\n    };\r\n    get changes(): {\r\n        $set?: any;\r\n        $unset?: any;\r\n        $inc?: any;\r\n        $push?: any;\r\n        $pull?: any;\r\n        $pullAll?: any;\r\n    } {\r\n        return this._changes;\r\n    }\r\n\r\n    diff(original: number, modified: number): Omnom;\r\n    diff(original: [any], modified: any[]): Omnom;\r\n    diff(original: MongoDB.ObjectID, modified: MongoDB.ObjectID): Omnom;\r\n    diff(original: Object, modified: Object): Omnom;\r\n    diff(original: any, modified: any): Omnom {\r\n        this.onObject(original, modified);\r\n        return this;\r\n    }\r\n\r\n    static diff(original: number, modified: number, options?: {\r\n        atomicNumbers?: boolean;\r\n    });\r\n    static diff(original: [any], modified: any[], options?: {\r\n        atomicNumbers?: boolean;\r\n    });\r\n    static diff(original: MongoDB.ObjectID, modified: MongoDB.ObjectID, options?: {\r\n        atomicNumbers?: boolean;\r\n    });\r\n    static diff(original: Object, modified: Object, options?: {\r\n        atomicNumbers?: boolean;\r\n    });\r\n    static diff(original: any, modified: any, options?: {\r\n        atomicNumbers?: boolean;\r\n    }) {\r\n        return new Omnom(options).diff(original, modified).changes;\r\n    }\r\n\r\n    private onObject(original: number, modified: number, changePath?: string): void;\r\n    private onObject(original: [any], modified: any[], changePath?: string): void;\r\n    private onObject(original: MongoDB.ObjectID, modified: MongoDB.ObjectID, changePath?: string): void;\r\n    private onObject(original: Object, modified: Object, changePath?: string): void;\r\n    private onObject(original: any, modified: any, changePath?: string): void {\r\n        if (original === undefined || original === null)\r\n            return (original !== modified) && this.set(changePath, modified);\r\n\r\n        if (typeof original === 'number' && typeof modified === 'number' && original !== modified) {\r\n            if (this.options.atomicNumbers) return this.inc(changePath, modified - original);\r\n            return this.set(changePath, modified);\r\n        }\r\n\r\n        if (Array.isArray(original) && Array.isArray(modified))\r\n            return this.onArray(original, modified, changePath);\r\n\r\n        if (original instanceof MongoDB.ObjectID && modified instanceof MongoDB.ObjectID)\r\n            return !original.equals(modified) && this.set(changePath, modified);\r\n\r\n        if (!_.isPlainObject(original) || !_.isPlainObject(modified))\r\n            return !_.isEqual(original, modified) && this.set(changePath, modified);\r\n\r\n        _.each(modified, (value, key) => {\r\n            // Handle array diffs in their own special way\r\n            if (Array.isArray(value) && Array.isArray(original[key])) this.onArray(original[key], value, this.resolve(changePath, key));\r\n\r\n            // Otherwise, just keep going\r\n            else this.onObject(original[key], value, this.resolve(changePath, key));\r\n        }, this);\r\n\r\n        // Unset removed properties\r\n        _.each(original, (value, key) => {\r\n            if (modified[key] === undefined) return this.unset(this.resolve(changePath, key));\r\n        }, this);\r\n    }\r\n\r\n    private onArray(original: any[], modified: any[], changePath: string): void {\r\n        // Check if we can get from original => modified using just pulls\r\n        if (original.length > modified.length) {\r\n            return this.onSmallerArray(original, modified, changePath);\r\n        }\r\n\r\n        // Check if we can get from original => modified using just pushes\r\n        if (original.length < modified.length) {\r\n            return this.onLargerArray(original, modified, changePath);\r\n        }\r\n\r\n        // Otherwise, we need to use $set to generate the new array\r\n        return this.onSimilarArray(original, modified, changePath);\r\n    }\r\n\r\n    private onSmallerArray(original: any[], modified: any[], changePath: string): void {\r\n      let  pulls = [];\r\n      let i = 0;\r\n      let j = 0;\r\n      \r\n      for (; i < original.length && j < modified.length; i++) {\r\n          if (this.almostEqual(original[i], modified[j])) j++;\r\n          else pulls.push(original[i]);\r\n      }\r\n\r\n      for (; i < original.length; i++)\r\n          pulls.push(original[i]);\r\n\r\n      if (j === modified.length) {\r\n          if (pulls.length === 1) return this.pull(changePath, pulls[0]);\r\n          // We can complete using just pulls\r\n          return pulls.forEach((pull) => this.pull(changePath, pull));\r\n      }\r\n\r\n      // If we have a smaller target array than our source, we will need to re-create it\r\n      // regardless (if we want to do so in a single operation anyway)\r\n      else return this.set(changePath, modified);\r\n    }\r\n    \r\n    private onLargerArray(original: any[], modified: any[], changePath: string): void {\r\n      let canPush = true;\r\n      for (let i = 0; i < original.length; i++)\r\n          if (this.almostEqual(original[i], modified[i]) < 1) {\r\n              canPush = false;\r\n              break;\r\n          }\r\n\r\n      if (canPush) {\r\n          for (let i = original.length; i < modified.length; i++)\r\n              this.push(changePath, modified[i]);\r\n          return;\r\n      }\r\n      \r\n      return this.onSimilarArray(original, modified, changePath);\r\n    }\r\n    \r\n    private onSimilarArray(original: any[], modified: any[], changePath: string): void {\r\n      // Check how many manipulations would need to be performed, if it's more than half the array size\r\n      // then rather re-create the array\r\n      let sets = [];\r\n      let partials = [];\r\n      for (let i = 0; i < modified.length; i++) {\r\n          let equality = this.almostEqual(original[i], modified[i]);\r\n          if (equality === 0) sets.push(i);\r\n          else if (equality < 1) partials.push(i);\r\n      }\r\n\r\n      if (sets.length > modified.length / 2)\r\n          return this.set(changePath, modified);\r\n\r\n      for (let i = 0; i < sets.length; i++)\r\n          this.set(this.resolve(changePath, sets[i].toString()), modified[sets[i]]);\r\n\r\n      for (let i = 0; i < partials.length; i++)\r\n          this.onObject(original[partials[i]], modified[partials[i]], this.resolve(changePath, partials[i].toString()));\r\n    }\r\n\r\n    private set(path: string, value: any) {\r\n        if (!this.changes.$set)\r\n            this.changes.$set = {};\r\n\r\n        this.changes.$set[path] = value;\r\n    }\r\n\r\n    private unset(path: string) {\r\n        if (!this.changes.$unset)\r\n            this.changes.$unset = {};\r\n\r\n        this.changes.$unset[path] = 1;\r\n    }\r\n\r\n    private inc(path: string, value: number) {\r\n        if (!this.changes.$inc)\r\n            this.changes.$inc = {};\r\n\r\n        this.changes.$inc[path] = value;\r\n    }\r\n\r\n    private push(path: string, value: any) {\r\n        if (!this.changes.$push)\r\n            this.changes.$push = {};\r\n\r\n        if (this.changes.$push[path]) {\r\n            if (this.changes.$push[path].$each)\r\n                this.changes.$push[path].$each.push(value);\r\n            else\r\n                this.changes.$push[path] = { $each: [this.changes.$push[path], value] };\r\n        } else this.changes.$push[path] = value;\r\n    }\r\n\r\n    private pull(path: string, value: any) {\r\n        if (!this.changes.$pull)\r\n            this.changes.$pull = {};\r\n\r\n        if (this.changes.$pullAll && this.changes.$pullAll[path]) {\r\n            return this.changes.$pullAll[path].push(value);\r\n        }\r\n\r\n        if (this.changes.$pull[path]) {\r\n            this.pullAll(path, [this.changes.$pull[path], value]);\r\n            delete this.changes.$pull[path];\r\n            if (_.keys(this.changes.$pull).length === 0)\r\n                delete this.changes.$pull;\r\n            return;\r\n        }\r\n\r\n        this.changes.$pull[path] = value;\r\n    }\r\n\r\n    private pullAll(path: string, values: any[]) {\r\n        if (!this.changes.$pullAll)\r\n            this.changes.$pullAll = {};\r\n\r\n        this.changes.$pullAll[path] = values;\r\n    }\r\n\r\n    private resolve(...args) {\r\n        let validArguments = [];\r\n        args.forEach(function (arg) {\r\n            if (arg) validArguments.push(arg);\r\n        });\r\n        return validArguments.join('.');\r\n    }\r\n\r\n    private almostEqual(o1: Object, o2: Object);\r\n    private almostEqual(o1: any, o2: any) {\r\n        if (!_.isPlainObject(o1) || !_.isPlainObject(o2)) return o1 == o2 ? 1 : 0;\r\n\r\n        let object1KeyIndex, object1Keys = Object.keys(o1);\r\n        let object2Keys = Object.keys(o2);\r\n\r\n        let commonKeys = [];\r\n        for (object1KeyIndex = 0; object1KeyIndex < object1Keys.length; object1KeyIndex++)\r\n            if (~object2Keys.indexOf(object1Keys[object1KeyIndex])) commonKeys.push(object1Keys[object1KeyIndex]);\r\n\r\n        let totalKeys = object1Keys.length + object2Keys.length - commonKeys.length;\r\n        let keysDifference = totalKeys - commonKeys.length;\r\n\r\n        let requiredChanges = 0;\r\n        for (let i = 0; i < commonKeys.length; i++)\r\n            if (this.almostEqual(o1[commonKeys[i]], o2[commonKeys[i]]) < 1) requiredChanges++;\r\n\r\n        return 1 - (keysDifference / totalKeys) - (requiredChanges / commonKeys.length);\r\n    }\r\n}"],"sourceRoot":"/source/"}