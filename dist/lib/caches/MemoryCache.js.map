{"version":3,"sources":["lib/caches/MemoryCache.ts"],"names":[],"mappings":";AAAA,MAAY,QAAQ,WAAM,UAAU,CAAC,CAAA;AAGrC;;;;;GAKG;AACH;IAAA;QACY,UAAK,GAAQ,EAAE,CAAC;IAgB5B,CAAC;IAdG,GAAG,CAAI,GAAW,EAAE,KAAQ;QACxB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QACxB,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;IAED,GAAG,CAAI,GAAW;QACd,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7C,CAAC;IAED,KAAK,CAAC,GAAW;QACb,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QACzC,EAAE,CAAA,CAAC,GAAG,CAAC;YAAC,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC/B,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IACjC,CAAC;AACL,CAAC;AAjBY,mBAAW,cAiBvB,CAAA","file":"lib/caches/MemoryCache.js","sourcesContent":["import * as Bluebird from \"bluebird\";\r\nimport {Cache} from \"../Cache\";\r\n\r\n/**\r\n * A cache implementation which stores documents in an in-memory cache.\r\n *\r\n * Be aware that this is an incredibly simplistic implementation which doesn't manage\r\n * memory usage at all and is very likely NOT suitable for production use.\r\n */\r\nexport class MemoryCache implements Cache {\r\n    private cache: any = {};\r\n\r\n    set<T>(key: string, value: T): Bluebird<T> {\r\n        this.cache[key] = value;\r\n        return Bluebird.resolve(value);\r\n    }\r\n\r\n    get<T>(key: string): Bluebird<T> {\r\n        return Bluebird.resolve(this.cache[key]);\r\n    }\r\n\r\n    clear(key: string) : Bluebird<boolean> {\r\n        let has = this.cache.hasOwnProperty(key);\r\n        if(has) delete this.cache[key];\r\n        return Bluebird.resolve(has);\r\n    }\r\n}"],"sourceRoot":"/source/"}