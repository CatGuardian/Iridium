{"version":3,"sources":["lib/caches/NoOpCache.ts"],"names":["NoOpCache","NoOpCache.constructor","NoOpCache.set","NoOpCache.get","NoOpCache.clear"],"mappings":"AACA,IAAO,QAAQ,WAAW,UAAU,CAAC,CAAC;AAEtC;;;;;;GAMG;AACH;IAAAA;IAYAC,CAACA;IAXGD,uBAAGA,GAAHA,UAAOA,GAAWA,EAAEA,MAASA;QACzBE,MAAMA,CAACA,QAAQA,CAACA,OAAOA,CAACA,MAAMA,CAACA,CAACA;IACpCA,CAACA;IAEDF,uBAAGA,GAAHA,UAAOA,GAAWA;QACdG,MAAMA,CAACA,QAAQA,CAACA,OAAOA,EAAEA,CAACA;IAC9BA,CAACA;IAEDH,yBAAKA,GAALA,UAAMA,GAAWA;QACbI,MAAMA,CAACA,QAAQA,CAACA,OAAOA,CAACA,KAAKA,CAACA,CAACA;IACnCA,CAACA;IACLJ,gBAACA;AAADA,CAZA,AAYCA,IAAA;AAZY,iBAAS,YAYrB,CAAA","file":"lib/caches/NoOpCache.js","sourcesContent":["import {Cache} from '../Cache';\r\nimport Bluebird = require('bluebird');\r\n\r\n/**\r\n * A cache implementation which does not cache any received documents\r\n * and returns nothing when requested - mimicking an empty cache.\r\n *\r\n * This is the default cache used if one is not supplied and should\r\n * not impose any significant performance overhead.\r\n */\r\nexport class NoOpCache implements Cache {\r\n    set<T>(key: string, object: T): Bluebird<T> {\r\n        return Bluebird.resolve(object);\r\n    }\r\n\r\n    get<T>(key: string): Bluebird<void> {\r\n        return Bluebird.resolve();\r\n    }\r\n\r\n    clear(key: string): Bluebird<boolean> {\r\n        return Bluebird.resolve(false);\r\n    }\r\n}"],"sourceRoot":"/source/"}