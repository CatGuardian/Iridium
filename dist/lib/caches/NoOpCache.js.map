{"version":3,"sources":["lib/caches/NoOpCache.ts"],"names":[],"mappings":";AACA,IAAO,QAAQ,WAAW,UAAU,CAAC,CAAC;AAEtC;;;;;;GAMG;AACH;IAAA;IAYA,CAAC;IAXG,uBAAG,GAAH,UAAO,GAAW,EAAE,MAAS;QACzB,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;IAED,uBAAG,GAAH,UAAO,GAAW;QACd,MAAM,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;IAC9B,CAAC;IAED,yBAAK,GAAL,UAAM,GAAW;QACb,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;IACL,gBAAC;AAAD,CAZA,AAYC,IAAA;AAZY,iBAAS,YAYrB,CAAA","file":"lib/caches/NoOpCache.js","sourcesContent":["import {Cache} from '../Cache';\r\nimport Bluebird = require('bluebird');\r\n\r\n/**\r\n * A cache implementation which does not cache any received documents\r\n * and returns nothing when requested - mimicking an empty cache.\r\n *\r\n * This is the default cache used if one is not supplied and should\r\n * not impose any significant performance overhead.\r\n */\r\nexport class NoOpCache implements Cache {\r\n    set<T>(key: string, object: T): Bluebird<T> {\r\n        return Bluebird.resolve(object);\r\n    }\r\n\r\n    get<T>(key: string): Bluebird<void> {\r\n        return Bluebird.resolve();\r\n    }\r\n\r\n    clear(key: string): Bluebird<boolean> {\r\n        return Bluebird.resolve(false);\r\n    }\r\n}"],"sourceRoot":"/source/"}