{"version":3,"sources":["lib/Cursor.ts"],"names":[],"mappings":"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","file":"lib/Cursor.js","sourcesContent":["import {Model} from \"./Model\";\r\nimport * as General from \"./General\";\r\nimport * as MongoDB from \"mongodb\";\r\nimport * as Bluebird from \"bluebird\";\r\nimport * as Index from \"./Index\";\r\n\r\n/**\r\n * An Iridium collection cursor which allows the itteration through documents\r\n * in the collection, automatically wrapping them in the correct instance type.\r\n *\r\n * @param TDocument The interface representing the collection's documents\r\n * @param TInstance The interface or class used to represent the wrapped documents.\r\n */\r\nexport class Cursor<TDocument extends { _id?: any }, TInstance> {\r\n    /**\r\n     * Creates a new Iridium cursor which wraps a MongoDB cursor object\r\n     * @param {Model} model The Iridium model that this cursor belongs to\r\n     * @param {Object} conditions The conditions that resulte in this cursor being created\r\n     * @param {MongoDB.Cursor} cursor The MongoDB native cursor object to be wrapped\r\n     * @constructor\r\n     */\r\n    constructor(private model: Model<TDocument, TInstance>, private conditions: any, public cursor: MongoDB.Cursor) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Counts the number of documents which are matched by this cursor\r\n     * @param {function(Error, Number)} callback A callback which is triggered when the result is available\r\n     * @return {Promise<number>} A promise which will resolve with the number of documents matched by this cursor\r\n     */\r\n    count(callback?: General.Callback<number>): Bluebird<number> {\r\n        return new Bluebird<number>((resolve, reject) => {\r\n            this.cursor.count(true, (err, count) => {\r\n                if (err) return reject(err);\r\n                return resolve(<any>count);\r\n            });\r\n        }).nodeify(callback);\r\n    }\r\n\r\n    /**\r\n     * Runs the specified handler over each instance in the query results\r\n     * @param {function(Instance)} handler The handler which is triggered for each element in the query\r\n     * @param {function(Error)} callback A callback which is triggered when all operations have been dispatched\r\n     * @return {Promise} A promise which is resolved when all operations have been dispatched\r\n     */\r\n    forEach(handler: (instance: TInstance) => void, callback?: General.Callback<void>): Bluebird<void> {\r\n        let helpers = this.model.helpers;\r\n        return new Bluebird<void>((resolve, reject) => {\r\n            this.cursor.forEach((item: TDocument) => {\r\n                this.model.handlers.documentReceived(this.conditions, item, function () { return helpers.wrapDocument.apply(helpers, arguments); }).then(handler);\r\n            }, (err) => {\r\n                if (err) return reject(err);\r\n                return resolve(null);\r\n            });\r\n        }).nodeify(callback);\r\n    }\r\n\r\n    /**\r\n     * Runs the specified transform over each instance in the query results and returns the resulting transformed objects\r\n     * @param {function(Instance): TResult} transform A handler which is used to transform the result objects\r\n     * @param {function(Error, TResult[])} callback A callback which is triggered when the transformations are completed\r\n     * @return {Promise<TResult[]>} A promise which is fulfilled with the results of the transformations\r\n     */\r\n    map<TResult>(transform: (instance: TInstance) => TResult | Bluebird<TResult>, callback?: General.Callback<TResult[]>): Bluebird<TResult[]> {\r\n        let helpers = this.model.helpers;\r\n        return new Bluebird<TResult[]>((resolve, reject) => {\r\n            let promises: Bluebird<TResult>[] = [];\r\n            this.cursor.forEach((item: TDocument) => {\r\n                promises.push(this.model.handlers.documentReceived(this.conditions, item, function () { return helpers.wrapDocument.apply(helpers, arguments); })\r\n                    .then(<(instance) => TResult>transform));\r\n            }, (err) => {\r\n                if (err) return reject(err);\r\n                return resolve(Bluebird.all(promises));\r\n            });\r\n        }).nodeify(callback);\r\n    }\r\n\r\n    /**\r\n     * Retrieves all matching instances and returns them in an array\r\n     * @param {function(Error, TInstance[])} callback A callback which is triggered with the resulting instances\r\n     * @return {Promise<TInstance[]>} A promise which resolves with the instances returned by the query\r\n     */\r\n    toArray(callback?: General.Callback<TInstance[]>): Bluebird<TInstance[]> {\r\n        let helpers = this.model.helpers;\r\n        return new Bluebird<TDocument[]>((resolve, reject) => {\r\n            this.cursor.toArray((err, results: any[]) => {\r\n                if (err) return reject(err);\r\n                return resolve(<any>results);\r\n            });\r\n        }).map<TDocument, TInstance>((document) => {\r\n            return this.model.handlers.documentReceived(this.conditions, document, function () { return helpers.wrapDocument.apply(helpers, arguments); });\r\n        }).nodeify(callback);\r\n    }\r\n\r\n    /**\r\n     * Retrieves the next item in the results list\r\n     * @param {function(Error, TInstance)} callback A callback which is triggered when the next item becomes available\r\n     * @return {Promise<TInstance>} A promise which is resolved with the next item\r\n     */\r\n    next(callback?: General.Callback<TInstance>): Bluebird<TInstance> {\r\n        return new Bluebird<TDocument>((resolve, reject) => {\r\n            this.cursor.next((err, result: any) => {\r\n                if (err) return reject(err);\r\n                return resolve(<any>result);\r\n            });\r\n        }).then((document) => {\r\n            if (!document) return Bluebird.resolve(<TInstance>null);\r\n            return this.model.handlers.documentReceived(this.conditions, document, (document, isNew?, isPartial?) => this.model.helpers.wrapDocument(document, isNew, isPartial));\r\n        }).nodeify(callback);\r\n    }\r\n\r\n    /**\r\n     * Retrieves the next item in the result list and then closes the cursor\r\n     * @param {function(Error, TInstance)} callback A callback which is triggered when the next item becomes available\r\n     * @return {Promise<TInstance>} A promise which is resolved once the item becomes available and the cursor has been closed.\r\n     */\r\n    one(callback?: General.Callback<TInstance>): Bluebird<TInstance> {\r\n        return new Bluebird<TDocument>((resolve, reject) => {\r\n            this.cursor.next((err, result: any) => {\r\n                if (err) return reject(err);\r\n                return resolve(result);\r\n            });\r\n        }).then((document) => {\r\n            return new Bluebird<TDocument>((resolve, reject) => {\r\n                this.cursor.close((err) => {\r\n                    if (err) return reject(err);\r\n                    return resolve(<any>document);\r\n                });\r\n            });\r\n        }).then((document) => {\r\n            if (!document) return Bluebird.resolve(<TInstance>null);\r\n            return this.model.handlers.documentReceived(this.conditions, document, (document, isNew?, isPartial?) => this.model.helpers.wrapDocument(document, isNew, isPartial));\r\n        }).nodeify(callback);\r\n    }\r\n\r\n    /**\r\n     * Returns a new cursor which behaves the same as this one did before any results were retrieved\r\n     * @return {Cursor} The new cursor which starts at the beginning of the results\r\n     */\r\n    rewind(): Cursor<TDocument, TInstance> {\r\n        this.cursor.rewind();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a new cursor which sorts its results by the given index expression\r\n     * @param {model.IndexSpecification} sortExpression The index expression dictating the sort order and direction to use\r\n     * @return {Cursor} The new cursor which sorts its results by the sortExpression\r\n     */\r\n    sort(sortExpression: Index.IndexSpecification): Cursor<TDocument, TInstance> {\r\n        return new Cursor(this.model, this.conditions, this.cursor.sort(sortExpression));\r\n    }\r\n\r\n    /**\r\n     * Returns a new cursor which limits the number of returned results\r\n     * @param {Number} limit The maximum number of results to return\r\n     * @return {Cursor} The new cursor which will return a maximum number of results\r\n     */\r\n    limit(limit: number): Cursor<TDocument, TInstance> {\r\n        return new Cursor(this.model, this.conditions, this.cursor.limit(limit));\r\n    }\r\n\r\n    /**\r\n     * Returns a new cursor which skips a number of results before it begins\r\n     * returning any.\r\n     * @param {Number} skip The number of results to skip before the cursor beings returning\r\n     * @return {Cursor} The new cursor which skips a number of results\r\n     */\r\n    skip(skip: number): Cursor<TDocument, TInstance> {\r\n        return new Cursor(this.model, this.conditions, this.cursor.skip(skip));\r\n    }\r\n\r\n    /**\r\n     * Returns a new cursor which will read from the specified node type.\r\n     * @param {String} type The type of node to read from - see https://docs.mongodb.org/manual/core/read-preference/\r\n     * @return {Cursor} The new cursor which reads from the specified node type\r\n     */\r\n    readFrom(type: string): Cursor<TDocument, TInstance> {\r\n        return new Cursor(this.model, this.conditions, this.cursor.setReadPreference(type));\r\n    }\r\n}"],"sourceRoot":"/source/"}