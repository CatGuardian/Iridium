{"version":3,"sources":["lib/ModelHandlers.ts"],"names":[],"mappings":"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","file":"lib/ModelHandlers.js","sourcesContent":["import {Core} from \"./Core\";\r\nimport {Schema} from \"./Schema\";\r\nimport {Model} from \"./Model\";\r\nimport {ModelCache} from \"./ModelCache\";\r\nimport * as ModelOptions from \"./ModelOptions\";\r\n\r\nimport Skmatc = require(\"skmatc\");\r\nimport * as _ from \"lodash\";\r\nimport * as MongoDB from \"mongodb\";\r\nimport * as Bluebird from \"bluebird\";\r\n\r\n/**\r\n * Provides a number of methods which are used to handle events that occur within\r\n * the Iridium workflow - such as what happens when a document is received from\r\n * the database, or how to handle the creation of new documents and saving of instances.\r\n *\r\n * Mostly this is for cache support, wrapping and hook triggering.\r\n * @internal\r\n */\r\nexport class ModelHandlers<TDocument extends { _id?: any }, TInstance> {\r\n    constructor(public model: Model<TDocument, TInstance>) {\r\n\r\n    }\r\n\r\n    documentReceived<TResult>(conditions: any,\r\n        result: TDocument,\r\n        wrapper: (document: TDocument, isNew?: boolean, isPartial?: boolean) => TResult,\r\n        options: ModelOptions.QueryOptions = {}): Bluebird<TResult> {\r\n        _.defaults(options, {\r\n            cache: true,\r\n            partial: false\r\n        });\r\n\r\n        let wrapped: TResult;\r\n        return Bluebird.resolve(this.model.helpers.transformFromDB(result, { document: true })).then((target: any) => {\r\n            return <Bluebird<TResult>>Bluebird\r\n                // If onRetrieved returns a Bluebird promise then there is no significant performance overhead here\r\n                .resolve(this.model.hooks.onRetrieved && this.model.hooks.onRetrieved(target))\r\n                .then(() => {\r\n                    // Cache the document if caching is enabled\r\n                    if (this.model.core.cache && options.cache && !options.fields) {\r\n                        this.model.cache.set(target); // Does not block execution pipeline - fire and forget\r\n                    }\r\n\r\n                    // Wrap the document and trigger the ready hook\r\n                    let wrapped: TResult = wrapper(target, false, !!options.fields);\r\n\r\n                    // Only incur the additional promise's performance penalty if this hook is being used\r\n                    if (this.model.hooks.onReady)\r\n                        return Bluebird\r\n                            .resolve(this.model.hooks.onReady(<TInstance><any>wrapped))\r\n                            .then(() => wrapped);\r\n                    return wrapped;\r\n                });\r\n        });\r\n    }\r\n\r\n    creatingDocuments(documents: TDocument[]): Bluebird<any[]> {\r\n        return Bluebird.all(documents.map((document: any) => {\r\n            return Bluebird\r\n                // If onCreating returns a Bluebird promise then there is no significant performance overhead here\r\n                .resolve(this.model.hooks.onCreating && this.model.hooks.onCreating(document))\r\n                .then(() => {\r\n                    document = this.model.helpers.convertToDB(document, { document: true, properties: true });\r\n                    let validation: Skmatc.Result = this.model.helpers.validate(document);\r\n                    if (validation.failed) return Bluebird.reject(validation.error);\r\n\r\n                    return document;\r\n                });\r\n        }));\r\n    }\r\n\r\n    savingDocument(instance: TInstance, changes: any): Bluebird<TInstance> {\r\n        return Bluebird\r\n            // If onSaving returns a Bluebird promise then there is no significant performance overhead here\r\n            .resolve(this.model.hooks.onSaving && this.model.hooks.onSaving(instance, changes))\r\n            .then(() => {\r\n                return instance;\r\n            });\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}