{"version":3,"sources":["lib/ModelHandlers.ts"],"names":["ModelHandlers","ModelHandlers.constructor","ModelHandlers.documentReceived","ModelHandlers.creatingDocuments","ModelHandlers.savingDocument"],"mappings":"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","file":"lib/ModelHandlers.js","sourcesContent":["import {Core} from './Core';\r\nimport {Schema} from './Schema';\r\nimport {Model} from './Model';\r\nimport {ModelCache} from './ModelCache';\r\nimport * as ModelOptions from './ModelOptions';\r\n\r\nimport Skmatc = require('skmatc');\r\nimport _ = require('lodash');\r\nimport MongoDB = require('mongodb');\r\nimport Bluebird = require('bluebird');\r\n\r\n/**\r\n * Provides a number of methods which are used to handle events that occur within\r\n * the Iridium workflow - such as what happens when a document is received from\r\n * the database, or how to handle the creation of new documents and saving of instances.\r\n *\r\n * Mostly this is for cache support, wrapping and hook triggering.\r\n * @internal\r\n */\r\nexport class ModelHandlers<TDocument extends { _id?: any }, TInstance> {\r\n    constructor(public model: Model<TDocument, TInstance>) {\r\n\r\n    }\r\n\r\n    documentReceived<TResult>(conditions: any,\r\n        result: TDocument,\r\n        wrapper: (document: TDocument, isNew?: boolean, isPartial?: boolean) => TResult,\r\n        options: ModelOptions.QueryOptions = {}): Bluebird<TResult> {\r\n        _.defaults(options, {\r\n            cache: true,\r\n            partial: false\r\n        });\r\n\r\n        let wrapped: TResult;\r\n        return Bluebird.resolve(this.model.helpers.transformFromDB(result, { document: true })).then((target: any) => {\r\n            return <Bluebird<TResult>>Bluebird\r\n                // If onRetrieved returns a Bluebird promise then there is no significant performance overhead here\r\n                .resolve(this.model.hooks.onRetrieved && this.model.hooks.onRetrieved(target))\r\n                .then(() => {\r\n                    // Cache the document if caching is enabled\r\n                    if (this.model.core.cache && options.cache && !options.fields) {\r\n                        this.model.cache.set(target); // Does not block execution pipeline - fire and forget\r\n                    }\r\n\r\n                    // Wrap the document and trigger the ready hook\r\n                    let wrapped: TResult = wrapper(target, false, !!options.fields);\r\n\r\n                    // Only incur the additional promise's performance penalty if this hook is being used\r\n                    if (this.model.hooks.onReady)\r\n                        return Bluebird\r\n                            .resolve(this.model.hooks.onReady(<TInstance><any>wrapped))\r\n                            .then(() => wrapped);\r\n                    return wrapped;\r\n                });\r\n        });\r\n    }\r\n\r\n    creatingDocuments(documents: TDocument[]): Bluebird<any[]> {\r\n        return Bluebird.all(documents.map((document: any) => {\r\n            return Bluebird\r\n                // If onCreating returns a Bluebird promise then there is no significant performance overhead here\r\n                .resolve(this.model.hooks.onCreating && this.model.hooks.onCreating(document))\r\n                .then(() => {\r\n                    document = this.model.helpers.convertToDB(document, { document: true, properties: true });\r\n                    let validation: Skmatc.Result = this.model.helpers.validate(document);\r\n                    if (validation.failed) return Bluebird.reject(validation.error);\r\n\r\n                    return document;\r\n                });\r\n        }));\r\n    }\r\n\r\n    savingDocument(instance: TInstance, changes: any): Bluebird<TInstance> {\r\n        return Bluebird\r\n            // If onSaving returns a Bluebird promise then there is no significant performance overhead here\r\n            .resolve(this.model.hooks.onSaving && this.model.hooks.onSaving(instance, changes))\r\n            .then(() => {\r\n                return instance;\r\n            });\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}